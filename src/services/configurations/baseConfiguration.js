const { provider } = require('jimple');
const ConfigurationFile = require('../../abstracts/configurationFile');
/**
 * The base configuration is at the top of the Webpack configurations level and it includes the
 * settings for `resolve` and `module`.
 * @extends {ConfigurationFile}
 */
class WebpackBaseConfiguration extends ConfigurationFile {
  /**
   * Class constructor.
   * @param {Events}                    events                    To reduce the configuration.
   * @param {PathUtils}                 pathUtils                 Required by `ConfigurationFile`
   *                                                              in order to build the path to
   *                                                              the overwrite file.
   * @param {WebpackRulesConfiguration} webpackRulesConfiguration To get all the configuration rules
   *                                                              for the type of files that will be
   *                                                              bundled.
   */
  constructor(
    events,
    pathUtils,
    webpackRulesConfiguration
  ) {
    super(pathUtils, 'webpack/base.config.js');
    /**
     * A local reference for the `events` service.
     * @type {Events}
     */
    this.events = events;
    /**
     * A local reference for the `webpackRulesConfiguration` service.
     * @type {WebpackRulesConfiguration}
     */
    this.webpackRulesConfiguration = webpackRulesConfiguration;
  }
  /**
   * Create the configuration with the `resolve` and the `module` `rules`.
   * This method uses the reducer events `webpack-base-configuration-for-node` or
   * `webpack-base-configuration-for-browser`, depending on the target type. The event recieves
   * the configuration, the received `params` and expects a configuration on return.
   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building
   *                                            the configuration and that includes things like the
   *                                            target information, its entry settings, output
   *                                            paths, etc.
   * @return {object}
   */
  createConfig(params) {
    const { rules } = this.webpackRulesConfiguration.getConfig(params);
    const config = {
      resolve: {
        extensions: ['.js', '.jsx'],
        modules: ['./', 'node_modules'],
      },
      module: {
        rules,
      },
    };

    const eventName = params.target.is.node ?
      'webpack-base-configuration-for-node' :
      'webpack-base-configuration-for-browser';

    return this.events.reduce(eventName, config, params);
  }
}
/**
 * The service provider that once registered on the app container will set an instance of
 * `WebpackBaseConfiguration` as the `webpackBaseConfiguration` service.
 * @example
 * // Register it on the container
 * container.register(webpackBaseConfiguration);
 * // Getting access to the service instance
 * const webpackBaseConfiguration = container.get('webpackBaseConfiguration');
 * @type {Provider}
 */
const webpackBaseConfiguration = provider((app) => {
  app.set('webpackBaseConfiguration', () => new WebpackBaseConfiguration(
    app.get('events'),
    app.get('pathUtils'),
    app.get('webpackRulesConfiguration')
  ));
});

module.exports = {
  WebpackBaseConfiguration,
  webpackBaseConfiguration,
};
