const webpackNodeUtils = require('webpack-node-utils');
const {
  NoEmitOnErrorsPlugin,
} = require('webpack');
const { provider } = require('jimple');
const ConfigurationFile = require('../../interfaces/configurationFile');
/**
 * Creates the specifics of a Webpack configuration for a Node target production build.
 * @extends {ConfigurationFile}
 * @implements {ConfigurationFile}
 */
class WebpackNodeProductionConfiguration extends ConfigurationFile {
  /**
   * Class constructor.
   * @param {Events}                       events                   To reduce the configuration.
   * @param {PathUtils}                    pathUtils                Required by `ConfigurationFile`
   *                                                                in order to build the path to
   *                                                                the overwrite file.
   * @param {ProjectConfigurationSettings} projectConfiguration     Used to read the project's
   *                                                                paths.
   * @param {WebpackBaseConfiguration}     webpackBaseConfiguration The configuration this one will
   *                                                                extend.
   */
  constructor(
    events,
    pathUtils,
    projectConfiguration,
    webpackBaseConfiguration
  ) {
    super(
      pathUtils,
      'webpack/node.production.config.js',
      true,
      webpackBaseConfiguration
    );
    /**
     * A local reference for the `events` service.
     * @type {Events}
     */
    this.events = events;
    /**
     * All the project settings.
     * @type {ProjectConfigurationSettings}
     */
    this.projectConfiguration = projectConfiguration;
  }
  /**
   * Create the configuration with the `entry`, the `output` and the plugins specifics for a
   * Node target production build.
   * This method uses the reducer event `webpack-node-production-configuration`, which sends
   * the configuration, the received `params` and expects a configuration on return.
   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building
   *                                            the configuration and that include things like the
   *                                            hash for the files, the target information, the
   *                                            entry point, etc.
   * @return {object}
   */
  createConfig(params) {
    const { entry, target } = params;

    const config = {
      entry,
      output: {
        path: `./${target.folders.build}`,
        filename: '[name].js',
        publicPath: '/',
      },
      plugins: [
        // To avoid pushing assets with errors.
        new NoEmitOnErrorsPlugin(),
      ],
      target: 'node',
      node: {
        // Avoid getting an empty `__dirname`.
        __dirname: false,
      },
      /**
       * Mark the production dependencies as externals so Webpack won't try to push them into the
       * bundle.
       */
      externals: webpackNodeUtils.externals(),
    };
    // Reduce the configuration.
    return this.events.reduce(
      'webpack-node-production-configuration',
      config,
      params
    );
  }
}
/**
 * The service provider that once registered on the app container will set an instance of
 * `WebpackNodeProductionConfiguration` as the `webpackNodeProductionConfiguration` service.
 * @example
 * // Register it on the container
 * container.register(webpackNodeProductionConfiguration);
 * // Getting access to the service instance
 * const webpackNodeProdConfig = container.get('webpackNodeProductionConfiguration');
 * @type {Provider}
 */
const webpackNodeProductionConfiguration = provider((app) => {
  app.set(
    'webpackNodeProductionConfiguration',
    () => new WebpackNodeProductionConfiguration(
      app.get('events'),
      app.get('pathUtils'),
      app.get('projectConfiguration').getConfig(),
      app.get('webpackBaseConfiguration')
    )
  );
});

module.exports = {
  WebpackNodeProductionConfiguration,
  webpackNodeProductionConfiguration,
};
