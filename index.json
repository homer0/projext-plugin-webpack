[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/abstracts/configurationFile.js",
    "content": "const fs = require('fs-extra');\nconst extend = require('extend');\n/**\n * A helper class for creating configuration files that can be overwritten on\n * implementation.\n * @abstract\n */\nclass ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {PathUtils}         pathUtils            To build the path to the overwrite file.\n   * @param {string}            overwritePath        The path, inside the `config` folder, for the\n   *                                                 file that can overwrite the configuration.\n   * @param {boolean}           [asFactory=false]    If `true`, every time `getConfig` gets called,\n   *                                                 the configuration will be created again,\n   *                                                 instead of caching it the first time it's\n   *                                                 created.\n   * @param {?ConfigurationFile} [parentConfig=null] If this parameter is used, the configuration\n   *                                                 created by the instance will be merged on top\n   *                                                 of the configuration returned by the\n   *                                                 `getConfig` method of the parent configuration.\n   * @throws {TypeError} If instantiated directly.\n   * @abstract\n   */\n  constructor(pathUtils, overwritePath, asFactory = false, parentConfig = null) {\n    if (new.target === ConfigurationFile) {\n      throw new TypeError(\n        'ConfigurationFile is an abstract class, it can\\'t be instantiated directly'\n      );\n    }\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * The path, inside the `config` folder, for the file that can overwrite the configuration.\n     * @type {string}\n     */\n    this.overwritePath = overwritePath;\n    /**\n     * Whether the configuration should be created every time `getConfig` gets called or not.\n     * @type {boolean}\n     */\n    this.asFactory = asFactory;\n    /**\n     * A parent configuration to extend.\n     * @type {?ConfigurationFile}\n     */\n    this.parentConfig = parentConfig;\n    /**\n     * This will store the configuration after creating it.\n     * @type {?Object}\n     */\n    this._config = null;\n    /**\n     * A flag to know if the overwrite file has been loaded or not.\n     * @type {boolean}\n     */\n    this._fileConfigLoaded = false;\n    /**\n     * A function that eventually will return the changes from the overwrite file. Once the file\n     * is loaded, if the file exports a function, then it will replace this variable, otherwise, the\n     * return value of this method will be become the exported configuration.\n     * @return {Object}\n     */\n    this._fileConfig = () => ({});\n  }\n  /**\n   * This method will be called the first time `getConfig` gets called (or every time, depending on\n   * the value of the `asFactory` property) and it should return the configuration contents.\n   * As parameters, it will return the same ones sent to `getConfig`.\n   * @example\n   * // Let's say the class receives this call: `getConfig({ name: 'Charito'}, 'hello')`, you could\n   * // do something like this:\n   * createConfig(options, prefix) {\n   *   return { message: `${prefix} ${options.name}` };\n   * }\n   * // And the configuration would be `{ message: 'hello Charito'}`\n   * @throws {Error} if not overwritten.\n   * @abstract\n   */\n  createConfig() {\n    throw new Error('This method must to be overwritten');\n  }\n  /**\n   * This is the public method all other services uses to obtain the configuration. If the\n   * configuration doesn't exists or `asFactory` was set to `true` on the `constructor`, the\n   * configuration will be reloaded.\n   * @param  {Array} args A list of parameters for the service to use when creating the\n   *                      configuration\n   * @return {Object}\n   */\n  getConfig(...args) {\n    if (!this._config || this.asFactory) {\n      this._loadConfig(...args);\n    }\n\n    return this._config;\n  }\n  /**\n   * This is the real method that creates the configuration.\n   * @param  {Array} args A list of parameters for the service to use when creating the\n   *                      configuration\n   * @return {Object}\n   * @ignore\n   * @access protected\n   */\n  _loadConfig(...args) {\n    // If the overwrite file wasn't loaded yet...\n    if (!this._fileConfigLoaded) {\n      // ...turn on the flag that says it was loaded.\n      this._fileConfigLoaded = true;\n      // Call the method that loads the file.\n      this._loadConfigFromFile();\n    }\n\n    let parentConfig = {};\n    // If a parent configuration was defined on the constructor...\n    if (this.parentConfig) {\n      /**\n       * Get its configuration by calling its `getConfig` method with the same parameters this\n       * method received.\n       */\n      parentConfig = this.parentConfig.getConfig(...args);\n    }\n    /**\n     * Return the final configuration, which is a merge of the following things:\n     * - The parent configuration `getConfig` method result; or an empty object if no parent\n     * configuration was received.\n     * - The result of this instance `createConfig` method.\n     * - The contents of the overwrite file.\n     */\n    this._config = extend(\n      true,\n      {},\n      parentConfig,\n      this.createConfig(...args),\n      this._fileConfig(...args)\n    );\n  }\n  /**\n   * Load the configuration from the overwrite file.\n   * @ignore\n   * @access protected\n   */\n  _loadConfigFromFile() {\n    const filepath = this.pathUtils.join('config', this.overwritePath);\n    let overwriteContents = null;\n    // If the file exists...\n    if (fs.pathExistsSync(filepath)) {\n      // ...require it\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      overwriteContents = require(filepath);\n    }\n    // If the file exists and exported anything...\n    if (overwriteContents) {\n      // ...get the type of whatever the file exported.\n      const overwriteType = typeof overwriteContents;\n      // If the file exported a function...\n      if (overwriteType === 'function') {\n        // ...set it as the `_fileConfig` property.\n        this._fileConfig = overwriteContents;\n      } else {\n        // ...otherwise, set the `_fileConfig` property to return whatever the file exported.\n        this._fileConfig = () => overwriteContents;\n      }\n    }\n  }\n}\n\nmodule.exports = ConfigurationFile;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/abstracts/configurationFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "ConfigurationFile",
    "memberof": "src/abstracts/configurationFile.js",
    "static": true,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/abstracts/configurationFile.js",
    "importStyle": "ConfigurationFile",
    "description": "A helper class for creating configuration files that can be overwritten on\nimplementation.",
    "lineNumber": 8,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To build the path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "overwritePath",
        "description": "The path, inside the `config` folder, for the\n                                                file that can overwrite the configuration."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "asFactory",
        "description": "If `true`, every time `getConfig` gets called,\n                                                the configuration will be created again,\n                                                instead of caching it the first time it's\n                                                created."
      },
      {
        "nullable": true,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "parentConfig",
        "description": "If this parameter is used, the configuration\n                                                created by the instance will be merged on top\n                                                of the configuration returned by the\n                                                `getConfig` method of the parent configuration."
      }
    ],
    "abstract": true,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "If instantiated directly."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "overwritePath",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#overwritePath",
    "access": "public",
    "description": "The path, inside the `config` folder, for the file that can overwrite the configuration.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "asFactory",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#asFactory",
    "access": "public",
    "description": "Whether the configuration should be created every time `getConfig` gets called or not.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "parentConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#parentConfig",
    "access": "public",
    "description": "A parent configuration to extend.",
    "lineNumber": 50,
    "type": {
      "nullable": true,
      "types": [
        "ConfigurationFile"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_config",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_config",
    "access": "private",
    "description": "This will store the configuration after creating it.",
    "lineNumber": 55,
    "type": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_fileConfigLoaded",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_fileConfigLoaded",
    "access": "private",
    "description": "A flag to know if the overwrite file has been loaded or not.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_fileConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_fileConfig",
    "access": "private",
    "description": "A function that eventually will return the changes from the overwrite file. Once the file\nis loaded, if the file exports a function, then it will replace this variable, otherwise, the\nreturn value of this method will be become the exported configuration.",
    "lineNumber": 67,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#createConfig",
    "access": "public",
    "description": "This method will be called the first time `getConfig` gets called (or every time, depending on\nthe value of the `asFactory` property) and it should return the configuration contents.\nAs parameters, it will return the same ones sent to `getConfig`.",
    "examples": [
      "// Let's say the class receives this call: `getConfig({ name: 'Charito'}, 'hello')`, you could\n// do something like this:\ncreateConfig(options, prefix) {\n  return { message: `${prefix} ${options.name}` };\n}\n// And the configuration would be `{ message: 'hello Charito'}`"
    ],
    "lineNumber": 83,
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if not overwritten."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "getConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#getConfig",
    "access": "public",
    "description": "This is the public method all other services uses to obtain the configuration. If the\nconfiguration doesn't exists or `asFactory` was set to `true` on the `constructor`, the\nconfiguration will be reloaded.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A list of parameters for the service to use when creating the\n                     configuration"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "_loadConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_loadConfig",
    "access": "protected",
    "description": "This is the real method that creates the configuration.",
    "lineNumber": 109,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A list of parameters for the service to use when creating the\n                     configuration"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "_loadConfigFromFile",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_loadConfigFromFile",
    "access": "protected",
    "description": "Load the configuration from the overwrite file.",
    "lineNumber": 147,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/express.js",
    "content": "const projext = require('projext/index');\n/**\n * Implements the Webpack middlewares for a target on an Express app.\n * @param {Express} expressApp    The app where the middlewares are going to be `use`d.\n * @param {string}  targetToBuild The name of the target that will be builded on the middleware(s).\n * @param {string}  targetToServe The name of the target that will implement the middleware(s). When\n *                                the other target is builded, it will assume that is on the\n *                                distribution directory, and if the target serving it is being\n *                                executed from the source directory it won't be able to use the\n *                                dev middleware file system without hardcoding some relatives paths\n *                                from the build to the source; to avoid that, the method gets\n *                                the build path of this target, so when using `getDirectory()`, it\n *                                will think they are both on the distribution directory and the\n *                                paths can be created relative to that.\n * @return {MiddlewaresInformation}\n */\nconst useExpress = (expressApp, targetToBuild, targetToServe) => {\n  // Get the middlewares service.\n  const webpackMiddlewares = projext.get('webpackMiddlewares');\n  // Generate the middlewares for the target.\n  const info = webpackMiddlewares.generate(targetToBuild, targetToServe);\n  // Loop all the received middlewares...\n  info.middlewares.forEach((middleware) => {\n    // ...and register them on the app.\n    expressApp.use(middleware());\n  });\n\n  return info;\n};\n\nmodule.exports = useExpress;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/express.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "useExpress",
    "memberof": "src/express.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/express.js~useExpress",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/express.js",
    "importStyle": "useExpress",
    "description": "Implements the Webpack middlewares for a target on an Express app.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Express"
        ],
        "spread": false,
        "optional": false,
        "name": "expressApp",
        "description": "The app where the middlewares are going to be `use`d."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToBuild",
        "description": "The name of the target that will be builded on the middleware(s)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToServe",
        "description": "The name of the target that will implement the middleware(s). When\n                               the other target is builded, it will assume that is on the\n                               distribution directory, and if the target serving it is being\n                               executed from the source directory it won't be able to use the\n                               dev middleware file system without hardcoding some relatives paths\n                               from the build to the source; to avoid that, the method gets\n                               the build path of this target, so when using `getDirectory()`, it\n                               will think they are both on the distribution directory and the\n                               paths can be created relative to that."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MiddlewaresInformation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/index.js",
    "content": "const {\n  webpackConfiguration,\n  webpackBuildEngine,\n} = require('./services/building');\n\nconst {\n  webpackBaseConfiguration,\n  webpackBrowserDevelopmentConfiguration,\n  webpackBrowserProductionConfiguration,\n  webpackRulesConfiguration,\n  webpackNodeDevelopmentConfiguration,\n  webpackNodeProductionConfiguration,\n} = require('./services/configurations');\n\nconst {\n  webpackMiddlewares,\n} = require('./services/server');\n\nconst { name } = require('../package.json');\n/**\n * This is the method called by projext when loading the plugin and it takes care of registering\n * the Webpack build engine service and all the other services the engine depends on.\n * @param {Projext} app The projext main container.\n * @ignore\n */\nconst loadPlugin = (app) => {\n  /**\n   * These will be used when defining the external dependencies of a Node target. Since their names\n   * don't match a dependency of the `package.json`, if not defined, webpack would try to bundle\n   * the plugin and all its dependencies.\n   */\n  app.set('webpackDefaultExternals', () => [\n    `${name}/express`,\n    `${name}/jimpex`,\n  ]);\n  // Register the main services of the build engine.\n  app.register(webpackConfiguration);\n  app.register(webpackBuildEngine);\n\n  // Register the services for building the targets confirmations.\n  app.register(webpackBaseConfiguration);\n  app.register(webpackBrowserDevelopmentConfiguration);\n  app.register(webpackBrowserProductionConfiguration);\n  app.register(webpackRulesConfiguration);\n  app.register(webpackNodeDevelopmentConfiguration);\n  app.register(webpackNodeProductionConfiguration);\n\n  app.register(webpackMiddlewares);\n};\n\nmodule.exports = loadPlugin;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "loadPlugin",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~loadPlugin",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack",
    "importStyle": "loadPlugin",
    "description": "This is the method called by projext when loading the plugin and it takes care of registering\nthe Webpack build engine service and all the other services the engine depends on.",
    "lineNumber": 26,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Projext"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The projext main container."
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/jimpex/frontendFs.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * This service overwrites the `Jimpex` default `FrontendFs` so it will use the file system\n * provided by the Webpack middleware instead of using the real file system.\n */\nclass WebpackFrontendFs {\n  /**\n   * Class constructor.\n   * @param {DevMiddlewareGetDirectory}  getDirectory  A function to get the directory the\n   *                                                   Webpack middleware is using.\n   * @param {DevMiddlewareGetFileSystem} getFileSystem A function to get the virtual file system\n   *                                                   the Webpack middleware uses. It uses a\n   *                                                   Promise in order to avoid accessing it\n   *                                                   before the middleware finishes compiling.\n   */\n  constructor(getDirectory, getFileSystem) {\n    /**\n     * A function to get the directory the Webpack middleware is using.\n     * @type {DevMiddlewareGetDirectory}\n     */\n    this.getDirectory = getDirectory;\n    /**\n     * A function that returns a Promise with the virtual file system the Webpack middleware uses.\n     * @type {DevMiddlewareGetFileSystem}\n     */\n    this.getFileSystem = getFileSystem;\n  }\n  /**\n   * Read a file from the file system.\n   * @param {string} filepath           The path to the file.\n   * @param {string} [encoding='utf-8'] The text encoding in which the file should be read.\n   * @return {Promise<string,Error>}\n   */\n  read(filepath, encoding = 'utf-8') {\n    return this.getFileSystem()\n    .then((fileSystem) => new Promise((resolve, reject) => {\n      fileSystem.readFile(this._getPath(filepath), encoding, (error, data) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      });\n    }));\n  }\n  /**\n   * Write a file on the file system.\n   * @param {string} filepath The path to the file.\n   * @param {string} data     The contents of the file.\n   * @return {Promise<undefined,Error>}\n   */\n  write(filepath, data) {\n    return this.getFileSystem()\n    .then((fileSystem) => new Promise((resolve, reject) => {\n      fileSystem.writeFile(this._getPath(filepath), data, (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }));\n  }\n  /**\n   * Delete a file from the file system.\n   * @param {string} filepath The path to the file.\n   * @return {Promise<undefined,Error>}\n   */\n  delete(filepath) {\n    return this.getFileSystem()\n    .then((fileSystem) => new Promise((resolve, reject) => {\n      fileSystem.unlink(this._getPath(filepath), (error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    }));\n  }\n  /**\n   * Generate a path using the virtual file system directory as root.\n   * @param {string} rest The path you want to prefix with the file system directory.\n   * @return {string}\n   * @ignore\n   * @access protected\n   */\n  _getPath(rest) {\n    return path.join(this.getDirectory(), rest);\n  }\n}\n/**\n * Generate a `Provider` with an already defined `getDirectory` and `getFileSystem` functions.\n * @example\n * // Generate the provider\n * const provider = webpackFrontendFs(() => 'some-dir', () => middleware.fs);\n * // Register it on the container\n * container.register(provider);\n * // Getting access to the service instance\n * const frontendFs = container.get('frontendFs');\n * @param {DevMiddlewareGetDirectory}  getDirectory  A function to get the directory the\n *                                                   Webpack middleware is using.\n * @param {DevMiddlewareGetFileSystem} getFileSystem A function to get the virtual file system\n *                                                   the Webpack middleware uses. It uses a\n *                                                   Promise in order to avoid accessing it\n *                                                   before the middleware finishes compiling.\n * @return {Provider}\n */\nconst webpackFrontendFs = (getDirectory, getFileSystem) => provider((app) => {\n  app.set('frontendFs', () => new WebpackFrontendFs(\n    getDirectory,\n    getFileSystem\n  ));\n});\n\nmodule.exports = {\n  WebpackFrontendFs,\n  webpackFrontendFs,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/jimpex/frontendFs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "WebpackFrontendFs",
    "memberof": "src/jimpex/frontendFs.js",
    "static": true,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/jimpex/frontendFs.js",
    "importStyle": "{WebpackFrontendFs}",
    "description": "This service overwrites the `Jimpex` default `FrontendFs` so it will use the file system\nprovided by the Webpack middleware instead of using the real file system.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "DevMiddlewareGetDirectory"
        ],
        "spread": false,
        "optional": false,
        "name": "getDirectory",
        "description": "A function to get the directory the\n                                                  Webpack middleware is using."
      },
      {
        "nullable": null,
        "types": [
          "DevMiddlewareGetFileSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "getFileSystem",
        "description": "A function to get the virtual file system\n                                                  the Webpack middleware uses. It uses a\n                                                  Promise in order to avoid accessing it\n                                                  before the middleware finishes compiling."
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "getDirectory",
    "memberof": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "static": false,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs#getDirectory",
    "access": "public",
    "description": "A function to get the directory the Webpack middleware is using.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "DevMiddlewareGetDirectory"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "getFileSystem",
    "memberof": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "static": false,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs#getFileSystem",
    "access": "public",
    "description": "A function that returns a Promise with the virtual file system the Webpack middleware uses.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "DevMiddlewareGetFileSystem"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "read",
    "memberof": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs#read",
    "access": "public",
    "description": "Read a file from the file system.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'utf-8'",
        "defaultRaw": "'utf-8'",
        "name": "encoding",
        "description": "The text encoding in which the file should be read."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "write",
    "memberof": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs#write",
    "access": "public",
    "description": "Write a file on the file system.",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The contents of the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "delete",
    "memberof": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs#delete",
    "access": "public",
    "description": "Delete a file from the file system.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_getPath",
    "memberof": "src/jimpex/frontendFs.js~WebpackFrontendFs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/frontendFs.js~WebpackFrontendFs#_getPath",
    "access": "protected",
    "description": "Generate a path using the virtual file system directory as root.",
    "lineNumber": 89,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rest",
        "description": "The path you want to prefix with the file system directory."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "webpackFrontendFs",
    "memberof": "src/jimpex/frontendFs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jimpex/frontendFs.js~webpackFrontendFs",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/jimpex/frontendFs.js",
    "importStyle": "{webpackFrontendFs}",
    "description": "Generate a `Provider` with an already defined `getDirectory` and `getFileSystem` functions.",
    "examples": [
      "// Generate the provider\nconst provider = webpackFrontendFs(() => 'some-dir', () => middleware.fs);\n// Register it on the container\ncontainer.register(provider);\n// Getting access to the service instance\nconst frontendFs = container.get('frontendFs');"
    ],
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "DevMiddlewareGetDirectory"
        ],
        "spread": false,
        "optional": false,
        "name": "getDirectory",
        "description": "A function to get the directory the\n                                                  Webpack middleware is using."
      },
      {
        "nullable": null,
        "types": [
          "DevMiddlewareGetFileSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "getFileSystem",
        "description": "A function to get the virtual file system\n                                                  the Webpack middleware uses. It uses a\n                                                  Promise in order to avoid accessing it\n                                                  before the middleware finishes compiling."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/jimpex/index.js",
    "content": "const { webpackFrontendFs } = require('./frontendFs');\nconst { webpackSendFile } = require('./sendFile');\n\nmodule.exports = {\n  webpackFrontendFs,\n  webpackSendFile,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/jimpex/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/jimpex/sendFile.js",
    "content": "const { provider } = require('jimple');\n/**\n * This service overwrites the `Jimpex` default `sendFile` so it will read the `frontendFs` service\n * to reads the file contents, thus using the virtual file system from the Webpack middleware.\n */\nclass WebpackSendFile {\n  /**\n   * Class constructor.\n   * @param {WebpackFrontendFs} frontendFs To be able to read the file from the middleware file\n   *                            system.\n   */\n  constructor(frontendFs) {\n    /**\n     * A local reference for the `frontendFs` service.\n     * @type {WebpackFrontendFs}\n     */\n    this.frontendFs = frontendFs;\n    /**\n     * Bind the `sendFile` method to use it as the service main function.\n     * @ignore\n     */\n    this.sendFile = this.sendFile.bind(this);\n  }\n  /**\n   * Send a file on the Jimpex response.\n   * @param {Reponse}  res           The response object generated by Express.\n   * @param {string}   filepath      The path to the file that needs to be sent.\n   * @param {function} [next=()=>{}] If anything goes wrong, this function will be called with the\n   *                                 exception.\n   */\n  sendFile(res, filepath, next = () => {}) {\n    this.frontendFs.read(filepath)\n    .then((contents) => {\n      res.write(contents);\n      res.end();\n    })\n    .catch((error) => {\n      next(error);\n    });\n  }\n}\n/**\n * The service provider that once registered on the app container will set\n * `WebpackSendFile.sendFile` as the `sendFIle` service.\n * @example\n * // Register it on the container\n * container.register(sendFile);\n * // Getting access to the service instance\n * const sendFile = container.get('sendFile');\n * @type {Provider}\n */\nconst webpackSendFile = provider((app) => {\n  app.set('sendFile', () => new WebpackSendFile(\n    app.get('frontendFs')\n  ).sendFile);\n});\n\nmodule.exports = {\n  WebpackSendFile,\n  webpackSendFile,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/jimpex/sendFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "class",
    "name": "WebpackSendFile",
    "memberof": "src/jimpex/sendFile.js",
    "static": true,
    "longname": "src/jimpex/sendFile.js~WebpackSendFile",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/jimpex/sendFile.js",
    "importStyle": "{WebpackSendFile}",
    "description": "This service overwrites the `Jimpex` default `sendFile` so it will read the `frontendFs` service\nto reads the file contents, thus using the virtual file system from the Webpack middleware.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 83,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/jimpex/sendFile.js~WebpackSendFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/sendFile.js~WebpackSendFile#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackFrontendFs"
        ],
        "spread": false,
        "optional": false,
        "name": "frontendFs",
        "description": "To be able to read the file from the middleware file\n                           system."
      }
    ]
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "frontendFs",
    "memberof": "src/jimpex/sendFile.js~WebpackSendFile",
    "static": false,
    "longname": "src/jimpex/sendFile.js~WebpackSendFile#frontendFs",
    "access": "public",
    "description": "A local reference for the `frontendFs` service.",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "WebpackFrontendFs"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "sendFile",
    "memberof": "src/jimpex/sendFile.js~WebpackSendFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/jimpex/sendFile.js~WebpackSendFile#sendFile",
    "access": "public",
    "description": "Send a file on the Jimpex response.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Reponse"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The response object generated by Express."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "The path to the file that needs to be sent."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "next",
        "description": "If anything goes wrong, this function will be called with the\n                                exception."
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "webpackSendFile",
    "memberof": "src/jimpex/sendFile.js",
    "static": true,
    "longname": "src/jimpex/sendFile.js~webpackSendFile",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/jimpex/sendFile.js",
    "importStyle": "{webpackSendFile}",
    "description": "The service provider that once registered on the app container will set\n`WebpackSendFile.sendFile` as the `sendFIle` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(sendFile);\n// Getting access to the service instance\nconst sendFile = container.get('sendFile');"
    ],
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/jimpex.js",
    "content": "const projext = require('projext/index');\nconst { middleware } = require('jimpex');\n\nconst { webpackFrontendFs, webpackSendFile } = require('./jimpex/index');\n/**\n * Implements the Webpack middlewares for a target on a Jimpex app.\n * @param {Jimpex} jimpexApp     The app where the middlewares are going to be registered.\n * @param {string} targetToBuild The name of the target that will be builded on the middleware(s).\n * @param {string} targetToServe The name of the target that will implement the middleware(s). When\n *                               the other target is builded, it will assume that is on the\n *                               distribution directory, and if the target serving it is being\n *                               executed from the source directory it won't be able to use the\n *                               dev middleware file system without hardcoding some relatives paths\n *                               from the build to the source; to avoid that, the method gets\n *                               the build path of this target, so when using `getDirectory()`, it\n *                               will think they are both on the distribution directory and the\n *                               paths can be created relative to that.\n * @return {MiddlewaresInformation}\n */\nconst useJimpex = (jimpexApp, targetToBuild, targetToServe) => {\n  // Get the middlewares service.\n  const webpackMiddlewares = projext.get('webpackMiddlewares');\n  // Generate the middlewares for the target.\n  const info = webpackMiddlewares.generate(targetToBuild, targetToServe);\n  /**\n   * Register the overwrite services...\n   * - The `webpackFrontendFs` overwrites the regular `frontendFs` in order to read files from\n   * the dev middleware file system.\n   * - The `webpackSendFile` overwrites the regular `sendFile`, so instead of doing\n   * `reqsponse.sendFile`, it will first read the file using the updated `frontendFs` and then\n   * send its data as response.\n   */\n  jimpexApp.register(webpackFrontendFs(\n    info.getDirectory,\n    info.getFileSystem\n  ));\n  jimpexApp.register(webpackSendFile);\n  // Loop all the received middlewares...\n  info.middlewares.forEach((webpackMiddleware) => {\n    // ...and register them.\n    jimpexApp.use(middleware(() => webpackMiddleware()));\n  });\n  // Add an event listener that shows a _'waiting'_ message when the server starts.\n  jimpexApp.get('events').once('after-start', () => {\n    jimpexApp.get('appLogger').warning('waiting for webpack...');\n  });\n\n  return info;\n};\n\nmodule.exports = useJimpex;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/jimpex.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "useJimpex",
    "memberof": "src/jimpex.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/jimpex.js~useJimpex",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/jimpex.js",
    "importStyle": "useJimpex",
    "description": "Implements the Webpack middlewares for a target on a Jimpex app.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimpex"
        ],
        "spread": false,
        "optional": false,
        "name": "jimpexApp",
        "description": "The app where the middlewares are going to be registered."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToBuild",
        "description": "The name of the target that will be builded on the middleware(s)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToServe",
        "description": "The name of the target that will implement the middleware(s). When\n                              the other target is builded, it will assume that is on the\n                              distribution directory, and if the target serving it is being\n                              executed from the source directory it won't be able to use the\n                              dev middleware file system without hardcoding some relatives paths\n                              from the build to the source; to avoid that, the method gets\n                              the build path of this target, so when using `getDirectory()`, it\n                              will think they are both on the distribution directory and the\n                              paths can be created relative to that."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MiddlewaresInformation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/services/building/configuration.js",
    "content": "const path = require('path');\nconst extend = require('extend');\nconst { provider } = require('jimple');\n/**\n * This service reads the targets information and generates what would be the contents of a\n * `webpack.config.js` for them.\n */\nclass WebpackConfiguration {\n  /**\n   * Class constructor.\n   * @param {BuildVersion}               buildVersion          To load the project version.\n   * @param {PathUtils}                  pathUtils             To generate the Webpack paths.\n   * @param {Targets}                    targets               To get the target information.\n   * @param {TargetConfigurationCreator} targetConfiguration   To create an overwrite\n   *                                                           configuration for the target.\n   * @param {WebpackConfigurations}      webpackConfigurations A dictionary of configurations\n   *                                                           for target type and build type.\n   */\n  constructor(\n    buildVersion,\n    pathUtils,\n    targets,\n    targetConfiguration,\n    webpackConfigurations\n  ) {\n    /**\n     * A local reference for the `buildVersion` service.\n     * @type {BuildVersion}\n     */\n    this.buildVersion = buildVersion;\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * A local reference for the `targetConfiguration` function service.\n     * @type {TargetConfigurationCreator}\n     */\n    this.targetConfiguration = targetConfiguration;\n    /**\n     * A dictionary with the configurations for target type and build type.\n     * @type {WebpackConfigurations}\n     */\n    this.webpackConfigurations = webpackConfigurations;\n  }\n  /**\n   * Get a dictionary of definitions that will be replaced on the generated bundle. This is done\n   * using the `webpack.DefinePlugin` plugin.\n   * @param {Target} target The target information.\n   * @param {string} env    The `NODE_ENV` to define.\n   * @return {Object}\n   */\n  getDefinitions(target, env) {\n    const definitions = {\n      'process.env.NODE_ENV': `'${env}'`,\n      [this.buildVersion.getDefinitionVariable()]: JSON.stringify(this.buildVersion.getVersion()),\n    };\n\n    if (\n      target.is.browser &&\n      target.configuration &&\n      target.configuration.enabled\n    ) {\n      definitions[target.configuration.defineOn] = JSON.stringify(\n        this.targets.getBrowserTargetConfiguration(target)\n      );\n    }\n\n    return definitions;\n  }\n  /**\n   * In case the target is a library, this method will be called in order to get the extra output\n   * settings webpack needs.\n   * @param {Target} target The target information.\n   * @return {Object}\n   */\n  getLibraryOptions(target) {\n    const { libraryOptions } = target;\n    // Create the object for webpack.\n    const newOptions = Object.assign({\n      libraryTarget: 'commonjs2',\n    }, libraryOptions);\n\n    // Remove any option unsupported by the webpack schema\n    [\n      'compress',\n    ].forEach((invalidOption) => {\n      delete newOptions[invalidOption];\n    });\n\n    return newOptions;\n  }\n  /**\n   * This method generates a complete Webpack configuration for a target.\n   * @param {Target} target    The target information.\n   * @param {string} buildType The intended build type: `production` or `development`.\n   * @return {Object}\n   * @throws {Error} If there's no base configuration for the target type.\n   * @throws {Error} If there's no base configuration for the target type and build type.\n   */\n  getConfig(target, buildType) {\n    const targetType = target.type;\n    if (!this.webpackConfigurations[targetType]) {\n      throw new Error(`There's no configuration for the selected target type: ${targetType}`);\n    } else if (!this.webpackConfigurations[targetType][buildType]) {\n      throw new Error(`There's no configuration for the selected build type: ${buildType}`);\n    }\n\n    const entryFile = path.join(target.paths.source, target.entry[buildType]);\n    const entries = [entryFile];\n    if (target.babel.polyfill) {\n      entries.unshift('babel-polyfill');\n    }\n\n    const params = {\n      target,\n      entry: {\n        [target.name]: entries,\n      },\n      definitions: this.getDefinitions(target, buildType),\n      output: target.output[buildType],\n      buildType,\n    };\n\n    let config = this.targetConfiguration(\n      `webpack/${target.name}.config.js`,\n      this.webpackConfigurations[targetType][buildType]\n    );\n    config = this.targetConfiguration(\n      `webpack/${target.name}.${buildType}.config.js`,\n      config\n    ).getConfig(params);\n    config.output.path = this.pathUtils.join(config.output.path);\n\n    if (target.library) {\n      config.output = extend(true, {}, config.output, this.getLibraryOptions(target));\n    }\n\n    return config;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackConfiguration` as the `webpackConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(webpackConfiguration);\n * // Getting access to the service instance\n * const webpackConfiguration = container.get('webpackConfiguration');\n * @type {Provider}\n */\nconst webpackConfiguration = provider((app) => {\n  app.set('webpackConfiguration', () => {\n    const webpackConfigurations = {\n      node: {\n        development: app.get('webpackNodeDevelopmentConfiguration'),\n        production: app.get('webpackNodeProductionConfiguration'),\n      },\n      browser: {\n        development: app.get('webpackBrowserDevelopmentConfiguration'),\n        production: app.get('webpackBrowserProductionConfiguration'),\n      },\n    };\n\n    return new WebpackConfiguration(\n      app.get('buildVersion'),\n      app.get('pathUtils'),\n      app.get('targets'),\n      app.get('targetConfiguration'),\n      webpackConfigurations\n    );\n  });\n});\n\nmodule.exports = {\n  WebpackConfiguration,\n  webpackConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/building/configuration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "WebpackConfiguration",
    "memberof": "src/services/building/configuration.js",
    "static": true,
    "longname": "src/services/building/configuration.js~WebpackConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/building/configuration.js",
    "importStyle": "{WebpackConfiguration}",
    "description": "This service reads the targets information and generates what would be the contents of a\n`webpack.config.js` for them.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "BuildVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "buildVersion",
        "description": "To load the project version."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To generate the Webpack paths."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To get the target information."
      },
      {
        "nullable": null,
        "types": [
          "TargetConfigurationCreator"
        ],
        "spread": false,
        "optional": false,
        "name": "targetConfiguration",
        "description": "To create an overwrite\n                                                          configuration for the target."
      },
      {
        "nullable": null,
        "types": [
          "WebpackConfigurations"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackConfigurations",
        "description": "A dictionary of configurations\n                                                          for target type and build type."
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "buildVersion",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#buildVersion",
    "access": "public",
    "description": "A local reference for the `buildVersion` service.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "BuildVersion"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "targetConfiguration",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#targetConfiguration",
    "access": "public",
    "description": "A local reference for the `targetConfiguration` function service.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "TargetConfigurationCreator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "webpackConfigurations",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#webpackConfigurations",
    "access": "public",
    "description": "A dictionary with the configurations for target type and build type.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "WebpackConfigurations"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "getDefinitions",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#getDefinitions",
    "access": "public",
    "description": "Get a dictionary of definitions that will be replaced on the generated bundle. This is done\nusing the `webpack.DefinePlugin` plugin.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "env",
        "description": "The `NODE_ENV` to define."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "getLibraryOptions",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#getLibraryOptions",
    "access": "public",
    "description": "In case the target is a library, this method will be called in order to get the extra output\nsettings webpack needs.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "getConfig",
    "memberof": "src/services/building/configuration.js~WebpackConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/configuration.js~WebpackConfiguration#getConfig",
    "access": "public",
    "description": "This method generates a complete Webpack configuration for a target.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `production` or `development`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If there's no base configuration for the target type."
      },
      {
        "types": [
          "Error"
        ],
        "description": "If there's no base configuration for the target type and build type."
      }
    ]
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "webpackConfiguration",
    "memberof": "src/services/building/configuration.js",
    "static": true,
    "longname": "src/services/building/configuration.js~webpackConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/building/configuration.js",
    "importStyle": "{webpackConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackConfiguration` as the `webpackConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackConfiguration);\n// Getting access to the service instance\nconst webpackConfiguration = container.get('webpackConfiguration');"
    ],
    "lineNumber": 158,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/services/building/engine.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * This build engine is in charge of generating the CLI commands and the configuration to bundle\n * a target using Webpack.\n */\nclass WebpackBuildEngine {\n  /**\n   * Class constructor.\n   * @param {EnvironmentUtils}     environmentUtils     To load environment variables sent by the\n   *                                                    CLI command to the configuration builder\n   *                                                    method.\n   * @param {Targets}              targets              To get a target information.\n   * @param {WebpackConfiguration} webpackConfiguration To generate a configuration for a target.\n   */\n  constructor(\n    environmentUtils,\n    targets,\n    webpackConfiguration\n  ) {\n    /**\n     * A local reference for the `environmentUtils` service.\n     * @type {EnvironmentUtils}\n     */\n    this.environmentUtils = environmentUtils;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * A local reference for the `webpackConfiguration` service.\n     * @type {WebpackConfiguration}\n     */\n    this.webpackConfiguration = webpackConfiguration;\n    /**\n     * A dictionary of environment variables the service will include on the CLI command and\\\n     * that will be retrieved when generating the configuration.\n     * The keys are the purpose and the values the actual names of the variables.\n     * @type {Object}\n     * @property {string} target The name of the target being builded.\n     * @property {string} type   The intended build type: `development` or `production`.\n     * @property {string} run    Whether or not to execute the target. This will be like a fake\n     *                           boolean as the CLI doesn't support boolean variables, so its value\n     *                           will be either `'true'` or `'false'`.\n     */\n    this.envVars = {\n      target: 'PROJEXT_WEBPACK_TARGET',\n      type: 'PROJEXT_WEBPACK_BUILD_TYPE',\n      run: 'PROJEXT_WEBPACK_RUN',\n    };\n  }\n  /**\n   * Get the CLI build command to bundle a target.\n   * @param  {Target}  target           The target information.\n   * @param  {string}  buildType        The intended build type: `development` or `production`.\n   * @param  {boolean} [forceRun=false] Force the target to run even if the `runOnDevelopment`\n   *                                    setting is `false`.\n   * @return {string}\n   */\n  getBuildCommand(target, buildType, forceRun = false) {\n    const vars = this.getEnvVarsAsString({\n      target: target.name,\n      type: buildType,\n      run: forceRun,\n    });\n\n    const config = path.join(\n      'node_modules/projext-plugin-webpack',\n      'src/webpack.config.js'\n    );\n\n    const options = [\n      '--progress',\n      '--profile',\n      '--colors',\n    ]\n    .join(' ');\n\n    const command = target.is.browser && (target.runOnDevelopment || forceRun) ?\n      'webpack-dev-server' :\n      'webpack';\n\n    return `${vars} ${command} --config ${config} ${options}`;\n  }\n  /**\n   * Get a Webpack configuration for a target.\n   * @param {Target} target    The target configuration.\n   * @param {string} buildType The intended build type: `development` or `production`.\n   * @return {object}\n   */\n  getConfiguration(target, buildType) {\n    return this.webpackConfiguration.getConfig(target, buildType);\n  }\n  /**\n   * Get a Webpack configuration by reading the environment variables sent by the CLI command\n   * `getBuildCommand` generates.\n   * @return {object}\n   * @throws {Error} If the environment variables are not present.\n   */\n  getWebpackConfig() {\n    const vars = this.getEnvVarsValues();\n    if (!vars.target || !vars.type) {\n      throw new Error('This file can only be run by using the `build` command');\n    }\n\n    const { type, run } = vars;\n    const target = Object.assign({}, this.targets.getTarget(vars.target));\n    if (run === 'true') {\n      target.runOnDevelopment = true;\n    }\n\n    return this.getConfiguration(target, type);\n  }\n  /**\n   * Given a dictionary with the environment variables purpose and values, this method generates\n   * a string with the variables real names and values.\n   * @example\n   * console.log(getEnvVarsAsString{\n   *   target: 'my-target',\n   *   type: 'development',\n   * });\n   * // will output `PROJEXT_WEBPACK_TARGET=my-target PROJEXT_WEBPACK_BUILD_TYPE=development`\n   * @param {object} values A dictionary with the purpose(alias) of the variables as keys.\n   * @return {string}\n   */\n  getEnvVarsAsString(values) {\n    return Object.keys(values)\n    .map((name) => `${this.envVars[name]}=${values[name]}`)\n    .join(' ');\n  }\n  /**\n   * Load the environment variables and returns them on a dictionary.\n   * @return {object} The dictionary will have the purpose(alias) of the variables as keys.\n   */\n  getEnvVarsValues() {\n    const vars = {};\n    Object.keys(this.envVars).forEach((name) => {\n      vars[name] = this.environmentUtils.get(this.envVars[name]);\n    });\n\n    return vars;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackBuildEngine` as the `webpackBuildEngine` service.\n * @example\n * // Register it on the container\n * container.register(webpackBuildEngine);\n * // Getting access to the service instance\n * const webpackBuildEngine = container.get('webpackBuildEngine');\n * @type {Provider}\n */\nconst webpackBuildEngine = provider((app) => {\n  app.set('webpackBuildEngine', () => new WebpackBuildEngine(\n    app.get('environmentUtils'),\n    app.get('targets'),\n    app.get('webpackConfiguration')\n  ));\n});\n\nmodule.exports = {\n  WebpackBuildEngine,\n  webpackBuildEngine,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/building/engine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "WebpackBuildEngine",
    "memberof": "src/services/building/engine.js",
    "static": true,
    "longname": "src/services/building/engine.js~WebpackBuildEngine",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/building/engine.js",
    "importStyle": "{WebpackBuildEngine}",
    "description": "This build engine is in charge of generating the CLI commands and the configuration to bundle\na target using Webpack.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 104,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "EnvironmentUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "environmentUtils",
        "description": "To load environment variables sent by the\n                                                   CLI command to the configuration builder\n                                                   method."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To get a target information."
      },
      {
        "nullable": null,
        "types": [
          "WebpackConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackConfiguration",
        "description": "To generate a configuration for a target."
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "environmentUtils",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#environmentUtils",
    "access": "public",
    "description": "A local reference for the `environmentUtils` service.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "EnvironmentUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "webpackConfiguration",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#webpackConfiguration",
    "access": "public",
    "description": "A local reference for the `webpackConfiguration` service.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "WebpackConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "envVars",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#envVars",
    "access": "public",
    "description": "A dictionary of environment variables the service will include on the CLI command and\\\nthat will be retrieved when generating the configuration.\nThe keys are the purpose and the values the actual names of the variables.",
    "lineNumber": 47,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The name of the target being builded."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "run",
        "description": "Whether or not to execute the target. This will be like a fake\n                          boolean as the CLI doesn't support boolean variables, so its value\n                          will be either `'true'` or `'false'`."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "getBuildCommand",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#getBuildCommand",
    "access": "public",
    "description": "Get the CLI build command to bundle a target.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceRun",
        "description": "Force the target to run even if the `runOnDevelopment`\n                                   setting is `false`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getConfiguration",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#getConfiguration",
    "access": "public",
    "description": "Get a Webpack configuration for a target.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target configuration."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `development` or `production`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "getWebpackConfig",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#getWebpackConfig",
    "access": "public",
    "description": "Get a Webpack configuration by reading the environment variables sent by the CLI command\n`getBuildCommand` generates.",
    "lineNumber": 101,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the environment variables are not present."
      }
    ],
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "getEnvVarsAsString",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#getEnvVarsAsString",
    "access": "public",
    "description": "Given a dictionary with the environment variables purpose and values, this method generates\na string with the variables real names and values.",
    "examples": [
      "console.log(getEnvVarsAsString{\n  target: 'my-target',\n  type: 'development',\n});\n// will output `PROJEXT_WEBPACK_TARGET=my-target PROJEXT_WEBPACK_BUILD_TYPE=development`"
    ],
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "A dictionary with the purpose(alias) of the variables as keys."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "getEnvVarsValues",
    "memberof": "src/services/building/engine.js~WebpackBuildEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/engine.js~WebpackBuildEngine#getEnvVarsValues",
    "access": "public",
    "description": "Load the environment variables and returns them on a dictionary.",
    "lineNumber": 136,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The dictionary will have the purpose(alias) of the variables as keys."
    },
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "webpackBuildEngine",
    "memberof": "src/services/building/engine.js",
    "static": true,
    "longname": "src/services/building/engine.js~webpackBuildEngine",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/building/engine.js",
    "importStyle": "{webpackBuildEngine}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackBuildEngine` as the `webpackBuildEngine` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackBuildEngine);\n// Getting access to the service instance\nconst webpackBuildEngine = container.get('webpackBuildEngine');"
    ],
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/services/building/index.js",
    "content": "const { webpackConfiguration } = require('./configuration');\nconst { webpackBuildEngine } = require('./engine');\n\nmodule.exports = {\n  webpackConfiguration,\n  webpackBuildEngine,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/building/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/services/configurations/baseConfiguration.js",
    "content": "const { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * The base configuration is at the top of the Webpack configurations level and it includes the\n * settings for `resolve` and `module`.\n * @extends {ConfigurationFile}\n */\nclass WebpackBaseConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {Events}                    events                    To reduce the configuration.\n   * @param {PathUtils}                 pathUtils                 Required by `ConfigurationFile`\n   *                                                              in order to build the path to\n   *                                                              the overwrite file.\n   * @param {WebpackRulesConfiguration} webpackRulesConfiguration To get all the configuration rules\n   *                                                              for the type of files that will be\n   *                                                              bundled.\n   */\n  constructor(\n    events,\n    pathUtils,\n    webpackRulesConfiguration\n  ) {\n    super(pathUtils, 'webpack/base.config.js');\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `webpackRulesConfiguration` service.\n     * @type {WebpackRulesConfiguration}\n     */\n    this.webpackRulesConfiguration = webpackRulesConfiguration;\n  }\n  /**\n   * Create the configuration with the `resolve` and the `module` `rules`.\n   * This method uses the reducer events `webpack-base-configuration-for-node` or\n   * `webpack-base-configuration-for-browser`, depending on the target type. The event recieves\n   * the configuration, the received `params` and expects a configuration on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {object}\n   */\n  createConfig(params) {\n    const { rules } = this.webpackRulesConfiguration.getConfig(params);\n    const config = {\n      resolve: {\n        extensions: ['.js', '.jsx'],\n        modules: ['./', 'node_modules'],\n      },\n      module: {\n        rules,\n      },\n    };\n\n    const eventName = params.target.is.node ?\n      'webpack-base-configuration-for-node' :\n      'webpack-base-configuration-for-browser';\n\n    return this.events.reduce(eventName, config, params);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackBaseConfiguration` as the `webpackBaseConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(webpackBaseConfiguration);\n * // Getting access to the service instance\n * const webpackBaseConfiguration = container.get('webpackBaseConfiguration');\n * @type {Provider}\n */\nconst webpackBaseConfiguration = provider((app) => {\n  app.set('webpackBaseConfiguration', () => new WebpackBaseConfiguration(\n    app.get('events'),\n    app.get('pathUtils'),\n    app.get('webpackRulesConfiguration')\n  ));\n});\n\nmodule.exports = {\n  WebpackBaseConfiguration,\n  webpackBaseConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/configurations/baseConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "WebpackBaseConfiguration",
    "memberof": "src/services/configurations/baseConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/baseConfiguration.js",
    "importStyle": "{WebpackBaseConfiguration}",
    "description": "The base configuration is at the top of the Webpack configurations level and it includes the\nsettings for `resolve` and `module`.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile`\n                                                             in order to build the path to\n                                                             the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "WebpackRulesConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackRulesConfiguration",
        "description": "To get all the configuration rules\n                                                             for the type of files that will be\n                                                             bundled."
      }
    ]
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration",
    "static": false,
    "longname": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "webpackRulesConfiguration",
    "memberof": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration",
    "static": false,
    "longname": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration#webpackRulesConfiguration",
    "access": "public",
    "description": "A local reference for the `webpackRulesConfiguration` service.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "WebpackRulesConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/baseConfiguration.js~WebpackBaseConfiguration#createConfig",
    "access": "public",
    "description": "Create the configuration with the `resolve` and the `module` `rules`.\nThis method uses the reducer events `webpack-base-configuration-for-node` or\n`webpack-base-configuration-for-browser`, depending on the target type. The event recieves\nthe configuration, the received `params` and expects a configuration on return.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "webpackBaseConfiguration",
    "memberof": "src/services/configurations/baseConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/baseConfiguration.js~webpackBaseConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/baseConfiguration.js",
    "importStyle": "{webpackBaseConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackBaseConfiguration` as the `webpackBaseConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackBaseConfiguration);\n// Getting access to the service instance\nconst webpackBaseConfiguration = container.get('webpackBaseConfiguration');"
    ],
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/services/configurations/browserDevelopmentConfiguration.js",
    "content": "const extend = require('extend');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ScriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst {\n  NoEmitOnErrorsPlugin,\n  DefinePlugin,\n  HotModuleReplacementPlugin,\n  NamedModulesPlugin,\n} = require('webpack');\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * Creates the specifics of a Webpack configuration for a browser target development build.\n * @extends {ConfigurationFile}\n */\nclass WebpackBrowserDevelopmentConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {Logger}                   appLogger                To inform the user when the build\n   *                                                            is running on the dev server.\n   * @param {Events}                   events                   To reduce the configuration.\n   * @param {PathUtils}                pathUtils                Required by `ConfigurationFile`\n   *                                                            in order to build the path to the\n   *                                                            overwrite file.\n   * @param {TargetsHTML}              targetsHTML              The service in charge of generating\n   *                                                            a default HTML file in case the\n   *                                                            target doesn't have one.\n   * @param {WebpackBaseConfiguration} webpackBaseConfiguration The configuration this one will\n   *                                                            extend.\n   */\n  constructor(\n    appLogger,\n    events,\n    pathUtils,\n    targetsHTML,\n    webpackBaseConfiguration\n  ) {\n    super(\n      pathUtils,\n      'webpack/browser.development.config.js',\n      true,\n      webpackBaseConfiguration\n    );\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `targetsHTML` service.\n     * @type {TargetsHTML}\n     */\n    this.targetsHTML = targetsHTML;\n  }\n  /**\n   * Create the configuration with the `entry`, the `output` and the plugins specifics for a\n   * browser target development build. It also checks if it should enable source map and the\n   * dev server based on the target information.\n   * This method uses the reducer event `webpack-browser-development-configuration`, which sends\n   * the configuration, the received `params` and expects a configuration on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {object}\n   */\n  createConfig(params) {\n    const {\n      definitions,\n      entry,\n      target,\n      output,\n    } = params;\n    // Define the basic stuff: entry and output.\n    const config = {\n      entry: extend(true, {}, entry),\n      output: {\n        path: `./${target.folders.build}`,\n        filename: output.js,\n        publicPath: '/',\n      },\n    };\n    // If the target has source maps enabled...\n    if (target.sourceMap.development) {\n      // ...configure the devtool\n      config.devtool = 'source-map';\n    }\n    // Setup the plugins.\n    config.plugins = [\n      // To push all the styles into one single file.\n      new ExtractTextPlugin(output.css),\n      // To automatically inject the `script` tag on the target `html` file.\n      new HtmlWebpackPlugin(Object.assign({}, target.html, {\n        template: this.targetsHTML.getFilepath(target),\n        inject: 'body',\n      })),\n      // To add the `async` attribute to the  `script` tag.\n      new ScriptExtHtmlWebpackPlugin({\n        defaultAttribute: 'async',\n      }),\n      // If the target uses hot replacement, add the plugin.\n      ...(target.hot ? [new NamedModulesPlugin(), new HotModuleReplacementPlugin()] : []),\n      // To avoid pushing assets with errors.\n      new NoEmitOnErrorsPlugin(),\n      // To add the _'browser env variables'_.\n      new DefinePlugin(definitions),\n      // To optimize the SCSS and remove repeated declarations.\n      new OptimizeCssAssetsPlugin(),\n    ];\n    // Define a list of extra entries that may be need depending on the target HMR configuration.\n    const hotEntries = [];\n    // If the target needs to run on development...\n    if (target.runOnDevelopment) {\n      const devServerConfig = this._normalizeTargetDevServerSettings(target);\n      // Add the dev server information to the configuration.\n      config.devServer = {\n        port: devServerConfig.port,\n        inline: !!devServerConfig.reload,\n        open: true,\n      };\n      /**\n       * This setting is specific to the webpack dev server and it allows web apps that use\n       * the history API to fallback to the server's root in case the app is loaded on a sub\n       * route, that way the custom routing can redirect the user.\n       * This is not yet documented on the projext configuration because I'm not entirely sure\n       * other dev servers can support it that easily, so for the moment if will be like a\n       * _\"hidden option\"_ for this plugin; While implementing the next build engine I'll go\n       * back and either document it as special setting for this plugin or adding to the\n       * projext main configuration.\n       * @todo Validate historyApiFallback\n       */\n      if (devServerConfig.historyApiFallback) {\n        config.devServer.historyApiFallback = devServerConfig.historyApiFallback;\n      }\n      // If the configuration has a custom host, set it.\n      if (devServerConfig.host !== 'localhost') {\n        config.devServer.host = devServerConfig.host;\n      }\n      // If there are SSL files, set them on the server.\n      if (devServerConfig.ssl) {\n        config.devServer.https = {\n          key: devServerConfig.ssl.key,\n          cert: devServerConfig.ssl.cert,\n          ca: devServerConfig.ssl.ca,\n        };\n      }\n      // If the server is being proxied, add the public host.\n      if (devServerConfig.proxied) {\n        config.devServer.public = devServerConfig.proxied.host;\n      }\n      // If the target will run with the dev server and it requires HMR...\n      if (target.hot) {\n        // Disable the `inline` mode.\n        config.devServer.inline = false;\n        // Set the public path to `/`, as required by HMR.\n        config.devServer.publicPath = '/';\n        // Enable the dev server `hot` setting.\n        config.devServer.hot = true;\n        // Push the required entries to enable HMR on the dev server.\n        hotEntries.push(...[\n          `webpack-dev-server/client?${devServerConfig.url}`,\n          'webpack/hot/only-dev-server',\n        ]);\n      }\n      // Push the fake plugin that logs the dev server statuses.\n      config.plugins.push(this._getDevServerLogger(config.devServer));\n    } else if (target.hot) {\n      /**\n       * If the target requires HMR but is not running with the dev server, it means that there's\n       * an Express or Jimpex target that implements the `webpack-hot-middleware`, so we push it\n       * required entry to the list.\n       */\n      hotEntries.push('webpack-hot-middleware/client?reload=true');\n    }\n    // If there are entries for HMR...\n    if (hotEntries.length) {\n      // Get target entry name.\n      const [entryName] = Object.keys(entry);\n      // Get the list of entries for the target.\n      const entries = config.entry[entryName];\n      // Check if the `babel-polyfill` is present, since it always needs to be first.\n      const polyfillIndex = entries.indexOf('babel-polyfill');\n      // If the `babel-polyfill` is present...\n      if (polyfillIndex > -1) {\n        // ...push all the _\"hot entries\"_ after it.\n        entries.splice(polyfillIndex + 1, 0, ...hotEntries);\n      } else {\n        // ...push all the _\"hot entries\"_ on top of the existing entries.\n        entries.unshift(...hotEntries);\n      }\n    }\n\n    // Reduce the configuration\n    return this.events.reduce(\n      'webpack-browser-development-configuration',\n      config,\n      params\n    );\n  }\n  /**\n   * Check a target dev server settings in order to validate those that needs to be removed or\n   * completed with their default values.\n   * @param {Target} target The target information.\n   * @return {TargetDevServerSettings}\n   */\n  _normalizeTargetDevServerSettings(target) {\n    // Get a new copy of the config to work with.\n    const config = extend(true, {}, target.devServer);\n    /**\n     * Set a flag to know if at least one SSL file was sent.\n     * This flag is also used when reading the `proxied` settings to determine the default\n     * behaviour of `proxied.https`.\n     */\n    let hasASSLFile = false;\n    // Loop all the SSL files...\n    Object.keys(config.ssl).forEach((name) => {\n      const file = config.ssl[name];\n      // If there's an actual path...\n      if (typeof file === 'string') {\n        // ...set the flag to `true`.\n        hasASSLFile = true;\n        // Generate the path to the file.\n        config.ssl[name] = this.pathUtils.join(file);\n      }\n    });\n    // If no SSL file was sent, just remove the settings.\n    if (!hasASSLFile) {\n      delete config.ssl;\n    }\n    // If the server is being proxied...\n    if (config.proxied.enabled) {\n      // ...if no `host` was specified, use the one defined for the server.\n      if (config.proxied.host === null) {\n        config.proxied.host = config.host;\n      }\n      // If no `https` option was specified, set it to `true` if at least one SSL file was sent.\n      if (config.proxied.https === null) {\n        config.proxied.https = hasASSLFile;\n      }\n    } else {\n      // ...otherwise, just remove the setting.\n      delete config.proxied;\n    }\n\n    const protocol = config.ssl ? 'https' : 'http';\n    config.url = `${protocol}://${config.host}:${config.port}`;\n\n    return config;\n  }\n  /**\n   * Creates a _'fake Webpack plugin'_ that detects when the bundle is being compiled in order to\n   * log messages with the dev server information.\n   * @param {object} devServer      The target dev server configuration.\n   * @param {number} devServer.port The port in which the dev server is running.\n   * @return {object} A webpack plugin.\n   * @ignore\n   * @access protected\n   */\n  _getDevServerLogger(devServer) {\n    const { port } = devServer;\n    return {\n      apply: (compiler) => {\n        compiler.plugin('compile', () => {\n          this.appLogger.success(`Starting on port ${port}`);\n          this.appLogger.warning('waiting for Webpack...');\n        });\n\n        compiler.plugin('done', () => {\n          // Awful hack, but the webpack output gets on the same line\n          setTimeout(() => {\n            this.appLogger.success(`Your app is running on the port ${port}`);\n          }, 0);\n        });\n      },\n    };\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackBrowserDevelopmentConfiguration` as the `webpackBrowserDevelopmentConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(webpackBrowserDevelopmentConfiguration);\n * // Getting access to the service instance\n * const webpackBrowserDevConfig = container.get('webpackBrowserDevelopmentConfiguration');\n * @type {Provider}\n */\nconst webpackBrowserDevelopmentConfiguration = provider((app) => {\n  app.set(\n    'webpackBrowserDevelopmentConfiguration',\n    () => new WebpackBrowserDevelopmentConfiguration(\n      app.get('appLogger'),\n      app.get('events'),\n      app.get('pathUtils'),\n      app.get('targetsHTML'),\n      app.get('webpackBaseConfiguration')\n    )\n  );\n});\n\nmodule.exports = {\n  WebpackBrowserDevelopmentConfiguration,\n  webpackBrowserDevelopmentConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/configurations/browserDevelopmentConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "class",
    "name": "WebpackBrowserDevelopmentConfiguration",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/browserDevelopmentConfiguration.js",
    "importStyle": "{WebpackBrowserDevelopmentConfiguration}",
    "description": "Creates the specifics of a Webpack configuration for a browser target development build.",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 125,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To inform the user when the build\n                                                           is running on the dev server."
      },
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile`\n                                                           in order to build the path to the\n                                                           overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "TargetsHTML"
        ],
        "spread": false,
        "optional": false,
        "name": "targetsHTML",
        "description": "The service in charge of generating\n                                                           a default HTML file in case the\n                                                           target doesn't have one."
      },
      {
        "nullable": null,
        "types": [
          "WebpackBaseConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackBaseConfiguration",
        "description": "The configuration this one will\n                                                           extend."
      }
    ]
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "targetsHTML",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration#targetsHTML",
    "access": "public",
    "description": "A local reference for the `targetsHTML` service.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "TargetsHTML"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration#createConfig",
    "access": "public",
    "description": "Create the configuration with the `entry`, the `output` and the plugins specifics for a\nbrowser target development build. It also checks if it should enable source map and the\ndev server based on the target information.\nThis method uses the reducer event `webpack-browser-development-configuration`, which sends\nthe configuration, the received `params` and expects a configuration on return.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "_normalizeTargetDevServerSettings",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration#_normalizeTargetDevServerSettings",
    "access": "private",
    "description": "Check a target dev server settings in order to validate those that needs to be removed or\ncompleted with their default values.",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetDevServerSettings"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "_getDevServerLogger",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~WebpackBrowserDevelopmentConfiguration#_getDevServerLogger",
    "access": "protected",
    "description": "Creates a _'fake Webpack plugin'_ that detects when the bundle is being compiled in order to\nlog messages with the dev server information.",
    "lineNumber": 266,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "devServer",
        "description": "The target dev server configuration."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "devServer.port",
        "description": "The port in which the dev server is running."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "A webpack plugin."
    }
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "webpackBrowserDevelopmentConfiguration",
    "memberof": "src/services/configurations/browserDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserDevelopmentConfiguration.js~webpackBrowserDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/browserDevelopmentConfiguration.js",
    "importStyle": "{webpackBrowserDevelopmentConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackBrowserDevelopmentConfiguration` as the `webpackBrowserDevelopmentConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackBrowserDevelopmentConfiguration);\n// Getting access to the service instance\nconst webpackBrowserDevConfig = container.get('webpackBrowserDevelopmentConfiguration');"
    ],
    "lineNumber": 295,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/services/configurations/browserProductionConfiguration.js",
    "content": "const HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ScriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin');\nconst CompressionPlugin = require('compression-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst UglifyJSPlugin = require('uglifyjs-webpack-plugin');\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst { DefinePlugin } = require('webpack');\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * Creates the specifics of a Webpack configuration for a browser target production build.\n * @extends {ConfigurationFile}\n */\nclass WebpackBrowserProductionConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {Events}                   events                  To reduce the configuration.\n   * @param {PathUtils}                pathUtils                Required by `ConfigurationFile`\n   *                                                            in order to build the path to the\n   *                                                            overwrite file.\n   * @param {TargetsHTML}              targetsHTML              The service in charge of generating\n   *                                                            a default HTML file in case the\n   *                                                            target doesn't have one.\n   * @param {WebpackBaseConfiguration} webpackBaseConfiguration The configuration this one will\n   *                                                            extend.\n   */\n  constructor(\n    events,\n    pathUtils,\n    targetsHTML,\n    webpackBaseConfiguration\n  ) {\n    super(\n      pathUtils,\n      'webpack/browser.production.config.js',\n      true,\n      webpackBaseConfiguration\n    );\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `targetsHTML` service.\n     * @type {TargetsHTML}\n     */\n    this.targetsHTML = targetsHTML;\n  }\n  /**\n   * Create the configuration with the `entry`, the `output` and the plugins specifics for a\n   * browser target production build.\n   * This method uses the reducer event `webpack-browser-production-configuration`, which sends\n   * the configuration, the received `params` and expects a configuration on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {object}\n   */\n  createConfig(params) {\n    const {\n      definitions,\n      entry,\n      target,\n      output,\n    } = params;\n    // Define the basic stuff: entry and output.\n    const config = {\n      entry,\n      output: {\n        path: `./${target.folders.build}`,\n        filename: output.js,\n        publicPath: '/',\n      },\n    };\n    // If the target has source maps enabled...\n    if (target.sourceMap.production) {\n      config.devtool = 'source-map';\n    }\n    // Setup the plugins.\n    config.plugins = [\n      // To push all the styles into one single file.\n      new ExtractTextPlugin(output.css),\n      // If the target is a library, it doesn't need HTML on production.\n      ...(\n        target.library ?\n          [] :\n          [\n            // To automatically inject the `script` tag on the target `html` file.\n            new HtmlWebpackPlugin(Object.assign({}, target.html, {\n              template: this.targetsHTML.getFilepath(target),\n              inject: 'body',\n            })),\n            // To add the `async` attribute to the  `script` tag.\n            new ScriptExtHtmlWebpackPlugin({\n              defaultAttribute: 'async',\n            }),\n          ]\n      ),\n      // To add the _'browser env variables'_.\n      new DefinePlugin(definitions),\n      // To uglify the code.\n      new UglifyJSPlugin({\n        sourceMap: !!target.sourceMap.production,\n      }),\n      // To optimize the SCSS and remove repeated declarations.\n      new OptimizeCssAssetsPlugin(),\n      // To compress the emitted assets using gzip, if the target is not a library.\n      ...(!target.library || target.libraryOptions.compress ? [new CompressionPlugin()] : []),\n    ];\n    // Reduce the configuration\n    return this.events.reduce(\n      'webpack-browser-production-configuration',\n      config,\n      params\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackBrowserProductionConfiguration` as the `webpackBrowserProductionConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(webpackBrowserProductionConfiguration);\n * // Getting access to the service instance\n * const webpackBrowserProdConfig = container.get('webpackBrowserProductionConfiguration');\n * @type {Provider}\n */\nconst webpackBrowserProductionConfiguration = provider((app) => {\n  app.set(\n    'webpackBrowserProductionConfiguration',\n    () => new WebpackBrowserProductionConfiguration(\n      app.get('events'),\n      app.get('pathUtils'),\n      app.get('targetsHTML'),\n      app.get('webpackBaseConfiguration')\n    )\n  );\n});\n\nmodule.exports = {\n  WebpackBrowserProductionConfiguration,\n  webpackBrowserProductionConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/configurations/browserProductionConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "class",
    "name": "WebpackBrowserProductionConfiguration",
    "memberof": "src/services/configurations/browserProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/browserProductionConfiguration.js",
    "importStyle": "{WebpackBrowserProductionConfiguration}",
    "description": "Creates the specifics of a Webpack configuration for a browser target production build.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 135,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile`\n                                                           in order to build the path to the\n                                                           overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "TargetsHTML"
        ],
        "spread": false,
        "optional": false,
        "name": "targetsHTML",
        "description": "The service in charge of generating\n                                                           a default HTML file in case the\n                                                           target doesn't have one."
      },
      {
        "nullable": null,
        "types": [
          "WebpackBaseConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackBaseConfiguration",
        "description": "The configuration this one will\n                                                           extend."
      }
    ]
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "targetsHTML",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration#targetsHTML",
    "access": "public",
    "description": "A local reference for the `targetsHTML` service.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "TargetsHTML"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/browserProductionConfiguration.js~WebpackBrowserProductionConfiguration#createConfig",
    "access": "public",
    "description": "Create the configuration with the `entry`, the `output` and the plugins specifics for a\nbrowser target production build.\nThis method uses the reducer event `webpack-browser-production-configuration`, which sends\nthe configuration, the received `params` and expects a configuration on return.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "webpackBrowserProductionConfiguration",
    "memberof": "src/services/configurations/browserProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/browserProductionConfiguration.js~webpackBrowserProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/browserProductionConfiguration.js",
    "importStyle": "{webpackBrowserProductionConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackBrowserProductionConfiguration` as the `webpackBrowserProductionConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackBrowserProductionConfiguration);\n// Getting access to the service instance\nconst webpackBrowserProdConfig = container.get('webpackBrowserProductionConfiguration');"
    ],
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/services/configurations/index.js",
    "content": "const { webpackBaseConfiguration } = require('./baseConfiguration');\nconst {\n  webpackBrowserDevelopmentConfiguration,\n} = require('./browserDevelopmentConfiguration');\nconst {\n  webpackBrowserProductionConfiguration,\n} = require('./browserProductionConfiguration');\nconst {\n  webpackRulesConfiguration,\n} = require('./rulesConfiguration');\nconst {\n  webpackNodeDevelopmentConfiguration,\n} = require('./nodeDevelopmentConfiguration');\nconst {\n  webpackNodeProductionConfiguration,\n} = require('./nodeProductionConfiguration');\n\nmodule.exports = {\n  webpackBaseConfiguration,\n  webpackBrowserDevelopmentConfiguration,\n  webpackBrowserProductionConfiguration,\n  webpackRulesConfiguration,\n  webpackNodeDevelopmentConfiguration,\n  webpackNodeProductionConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/configurations/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/services/configurations/nodeDevelopmentConfiguration.js",
    "content": "const webpackNodeUtils = require('webpack-node-utils');\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst {\n  NoEmitOnErrorsPlugin,\n} = require('webpack');\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * Creates the specifics of a Webpack configuration for a Node target development build.\n * @extends {ConfigurationFile}\n */\nclass WebpackNodeDevelopmentConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {Events}                       events                   To reduce the configuration.\n   * @param {PathUtils}                    pathUtils                Required by `ConfigurationFile`\n   *                                                                in order to build the path to\n   *                                                                the overwrite file.\n   * @param {WebpackBaseConfiguration}     webpackBaseConfiguration The configuration this one will\n   *                                                                extend.\n   * @param {Array}                        webpackDefaultExternals  The list of modules this plugin\n   *                                                                makes available and that need to\n   *                                                                be defined as externals in case\n   *                                                                the user uses them.\n   */\n  constructor(\n    events,\n    pathUtils,\n    webpackBaseConfiguration,\n    webpackDefaultExternals\n  ) {\n    super(\n      pathUtils,\n      'webpack/node.development.config.js',\n      true,\n      webpackBaseConfiguration\n    );\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A list of modules this plugin makes available and that need to be defined as externals on\n     * the webpack configuration in case the user uses them. If not defined as externals, webpack\n     * would try to bundle the entire plugin and its dependencies.\n     * @type {Array}\n     */\n    this.webpackDefaultExternals = webpackDefaultExternals;\n  }\n  /**\n   * Create the configuration with the `entry`, the `output` and the plugins specifics for a\n   * Node target development build.\n   * This method uses the reducer event `webpack-node-development-configuration`, which sends\n   * the configuration, the received `params` and expects a configuration on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {object}\n   */\n  createConfig(params) {\n    const { entry, target, output } = params;\n    // By default it doesn't watch the source files.\n    let watch = false;\n    // Setup the basic plugins.\n    const plugins = [\n      // To avoid pushing assets with errors.\n      new NoEmitOnErrorsPlugin(),\n      // To optimize the SCSS and remove repeated declarations.\n      new OptimizeCssAssetsPlugin(),\n    ];\n    // If the target needs to run on development...\n    if (target.runOnDevelopment) {\n      // ...watch the source files.\n      watch = true;\n      // Push the plugin that executes the target.\n      plugins.push(new webpackNodeUtils.WebpackNodeUtilsRunner());\n    }\n    // Define the list of modules that should be used as externals\n    const externals = [\n      ...this.webpackDefaultExternals,\n      ...target.excludeModules,\n    ];\n    // Define the rest of the configuration.\n    const config = {\n      entry,\n      output: {\n        path: `./${target.folders.build}`,\n        filename: output.js,\n        publicPath: '/',\n      },\n      watch,\n      plugins,\n      target: 'node',\n      node: {\n        // Avoid getting an empty `__dirname`.\n        __dirname: false,\n      },\n      /**\n       * Mark all the project dependencies, including the devDependencies, as externals. This way,\n       * Webpack won't try to push them into the bundle.\n       */\n      externals: webpackNodeUtils.externals({}, true, externals),\n    };\n    // Reduce the configuration.\n    return this.events.reduce(\n      'webpack-node-development-configuration',\n      config,\n      params\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackNodeDevelopmentConfiguration` as the `webpackNodeDevelopmentConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(webpackNodeDevelopmentConfiguration);\n * // Getting access to the service instance\n * const webpackNodeDevConfig = container.get('webpackNodeDevelopmentConfiguration');\n * @type {Provider}\n */\nconst webpackNodeDevelopmentConfiguration = provider((app) => {\n  app.set(\n    'webpackNodeDevelopmentConfiguration',\n    () => new WebpackNodeDevelopmentConfiguration(\n      app.get('events'),\n      app.get('pathUtils'),\n      app.get('webpackBaseConfiguration'),\n      app.get('webpackDefaultExternals')\n    )\n  );\n});\n\nmodule.exports = {\n  WebpackNodeDevelopmentConfiguration,\n  webpackNodeDevelopmentConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/configurations/nodeDevelopmentConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "WebpackNodeDevelopmentConfiguration",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/nodeDevelopmentConfiguration.js",
    "importStyle": "{WebpackNodeDevelopmentConfiguration}",
    "description": "Creates the specifics of a Webpack configuration for a Node target development build.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile`\n                                                               in order to build the path to\n                                                               the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "WebpackBaseConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackBaseConfiguration",
        "description": "The configuration this one will\n                                                               extend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackDefaultExternals",
        "description": "The list of modules this plugin\n                                                               makes available and that need to\n                                                               be defined as externals in case\n                                                               the user uses them."
      }
    ]
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "webpackDefaultExternals",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration#webpackDefaultExternals",
    "access": "public",
    "description": "A list of modules this plugin makes available and that need to be defined as externals on\nthe webpack configuration in case the user uses them. If not defined as externals, webpack\nwould try to bundle the entire plugin and its dependencies.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~WebpackNodeDevelopmentConfiguration#createConfig",
    "access": "public",
    "description": "Create the configuration with the `entry`, the `output` and the plugins specifics for a\nNode target development build.\nThis method uses the reducer event `webpack-node-development-configuration`, which sends\nthe configuration, the received `params` and expects a configuration on return.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "webpackNodeDevelopmentConfiguration",
    "memberof": "src/services/configurations/nodeDevelopmentConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeDevelopmentConfiguration.js~webpackNodeDevelopmentConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/nodeDevelopmentConfiguration.js",
    "importStyle": "{webpackNodeDevelopmentConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackNodeDevelopmentConfiguration` as the `webpackNodeDevelopmentConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackNodeDevelopmentConfiguration);\n// Getting access to the service instance\nconst webpackNodeDevConfig = container.get('webpackNodeDevelopmentConfiguration');"
    ],
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/services/configurations/nodeProductionConfiguration.js",
    "content": "const webpackNodeUtils = require('webpack-node-utils');\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst {\n  NoEmitOnErrorsPlugin,\n} = require('webpack');\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * Creates the specifics of a Webpack configuration for a Node target production build.\n * @extends {ConfigurationFile}\n */\nclass WebpackNodeProductionConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {Events}                       events                   To reduce the configuration.\n   * @param {PathUtils}                    pathUtils                Required by `ConfigurationFile`\n   *                                                                in order to build the path to\n   *                                                                the overwrite file.\n   * @param {WebpackBaseConfiguration}     webpackBaseConfiguration The configuration this one will\n   *                                                                extend.\n   * @param {Array}                        webpackDefaultExternals  The list of modules this plugin\n   *                                                                makes available and that need to\n   *                                                                be defined as externals in case\n   *                                                                the user uses them.\n   */\n  constructor(\n    events,\n    pathUtils,\n    webpackBaseConfiguration,\n    webpackDefaultExternals\n  ) {\n    super(\n      pathUtils,\n      'webpack/node.production.config.js',\n      true,\n      webpackBaseConfiguration\n    );\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A list of modules this plugin makes available and that need to be defined as externals on\n     * the webpack configuration in case the user uses them. If not defined as externals, webpack\n     * would try to bundle the entire plugin and its dependencies.\n     * @type {Array}\n     */\n    this.webpackDefaultExternals = webpackDefaultExternals;\n  }\n  /**\n   * Create the configuration with the `entry`, the `output` and the plugins specifics for a\n   * Node target production build.\n   * This method uses the reducer event `webpack-node-production-configuration`, which sends\n   * the configuration, the received `params` and expects a configuration on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {object}\n   */\n  createConfig(params) {\n    const { entry, target, output } = params;\n    // Define the list of modules that should be used as externals\n    const externals = [\n      ...this.webpackDefaultExternals,\n      ...target.excludeModules,\n    ];\n\n    const config = {\n      entry,\n      output: {\n        path: `./${target.folders.build}`,\n        filename: output.js,\n        publicPath: '/',\n      },\n      plugins: [\n        // To avoid pushing assets with errors.\n        new NoEmitOnErrorsPlugin(),\n        // To optimize the SCSS and remove repeated declarations.\n        new OptimizeCssAssetsPlugin(),\n      ],\n      target: 'node',\n      node: {\n        // Avoid getting an empty `__dirname`.\n        __dirname: false,\n      },\n      /**\n       * Mark the production dependencies as externals so Webpack won't try to push them into the\n       * bundle.\n       */\n      externals: webpackNodeUtils.externals({}, false, externals),\n    };\n    // Reduce the configuration.\n    return this.events.reduce(\n      'webpack-node-production-configuration',\n      config,\n      params\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackNodeProductionConfiguration` as the `webpackNodeProductionConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(webpackNodeProductionConfiguration);\n * // Getting access to the service instance\n * const webpackNodeProdConfig = container.get('webpackNodeProductionConfiguration');\n * @type {Provider}\n */\nconst webpackNodeProductionConfiguration = provider((app) => {\n  app.set(\n    'webpackNodeProductionConfiguration',\n    () => new WebpackNodeProductionConfiguration(\n      app.get('events'),\n      app.get('pathUtils'),\n      app.get('webpackBaseConfiguration'),\n      app.get('webpackDefaultExternals')\n    )\n  );\n});\n\nmodule.exports = {\n  WebpackNodeProductionConfiguration,\n  webpackNodeProductionConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/configurations/nodeProductionConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "WebpackNodeProductionConfiguration",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/nodeProductionConfiguration.js",
    "importStyle": "{WebpackNodeProductionConfiguration}",
    "description": "Creates the specifics of a Webpack configuration for a Node target production build.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 150,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile`\n                                                               in order to build the path to\n                                                               the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "WebpackBaseConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackBaseConfiguration",
        "description": "The configuration this one will\n                                                               extend."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackDefaultExternals",
        "description": "The list of modules this plugin\n                                                               makes available and that need to\n                                                               be defined as externals in case\n                                                               the user uses them."
      }
    ]
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "webpackDefaultExternals",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration",
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration#webpackDefaultExternals",
    "access": "public",
    "description": "A list of modules this plugin makes available and that need to be defined as externals on\nthe webpack configuration in case the user uses them. If not defined as externals, webpack\nwould try to bundle the entire plugin and its dependencies.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~WebpackNodeProductionConfiguration#createConfig",
    "access": "public",
    "description": "Create the configuration with the `entry`, the `output` and the plugins specifics for a\nNode target production build.\nThis method uses the reducer event `webpack-node-production-configuration`, which sends\nthe configuration, the received `params` and expects a configuration on return.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "webpackNodeProductionConfiguration",
    "memberof": "src/services/configurations/nodeProductionConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/nodeProductionConfiguration.js~webpackNodeProductionConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/nodeProductionConfiguration.js",
    "importStyle": "{webpackNodeProductionConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackNodeProductionConfiguration` as the `webpackNodeProductionConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackNodeProductionConfiguration);\n// Getting access to the service instance\nconst webpackNodeProdConfig = container.get('webpackNodeProductionConfiguration');"
    ],
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/services/configurations/rulesConfiguration.js",
    "content": "const ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * Define the Webpack configuration rules for basic types of assets: Javascript, stylesheets,\n * images and fonts.\n * @extends {ConfigurationFile}\n */\nclass WebpackRulesConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {BabelConfiguration} babelConfiguration Used to configure the `babel-loader`.\n   * @param {Events}             events               To reduce each set of rules and the entire\n   *                                                  configuration.\n   * @param {PathUtils}          pathUtils            Required by `ConfigurationFile` in order to\n   *                                                  build the path to the overwrite file.\n   */\n  constructor(babelConfiguration, events, pathUtils) {\n    super(pathUtils, 'webpack/rules.config.js');\n    /**\n     * A local reference for the `babelConfiguration` service.\n     * @type {BabelConfiguration}\n     */\n    this.babelConfiguration = babelConfiguration;\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n  }\n  /**\n   * Creates the rules configuration for the required target.\n   * This method uses the reducer events `webpack-rules-configuration-for-node` or\n   * `webpack-rules-configuration-for-browser`, depending on the target type, and then\n   * `webpack-rules-configuration`. The event receives the configuration object, the `params` and\n   * it expects an updated configuration object on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Object}\n   * @property {Array} rules The list of rules\n   */\n  createConfig(params) {\n    const rules = [\n      ...this.getJSRules(params),\n      ...this.getSCSSRules(params),\n      ...this.getCSSRules(params),\n      ...this.getHTMLRules(params),\n      ...this.getFontsRules(params),\n      ...this.getImagesRules(params),\n      ...this.getFaviconsRules(params),\n    ];\n\n    const eventName = params.target.is.node ?\n      'webpack-rules-configuration-for-node' :\n      'webpack-rules-configuration-for-browser';\n    return this._reduceConfig(\n      [eventName, 'webpack-rules-configuration'],\n      { rules },\n      params\n    );\n  }\n  /**\n   * Defines the list of rules for Javascript files.\n   * This method uses the reducer event `webpack-js-rules-configuration-for-browser` or\n   * `webpack-js-rules-configuration-for-node`, depending on the target type, and then\n   * `webpack-js-rules-configuration`. The event receives the rules, the `params` and expects a\n   * rules list on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Array}\n   */\n  getJSRules(params) {\n    const { target } = params;\n    const rules = [{\n      test: /\\.jsx?$/i,\n      // Only check for files on the target source directory and the configurations folder.\n      include: [\n        new RegExp(target.folders.source),\n        new RegExp(this.pathUtils.join('config')),\n        ...target.includeModules.map((name) => new RegExp(`/node_modules/${name}`)),\n      ],\n      use: [{\n        loader: 'babel-loader',\n        // Apply the target's own Babel configuration.\n        options: this.babelConfiguration.getConfigForTarget(target),\n      }],\n    }];\n    // Reduce the rules.\n    const eventName = target.is.node ?\n      'webpack-js-rules-configuration-for-node' :\n      'webpack-js-rules-configuration-for-browser';\n    return this._reduceConfig(\n      [eventName, 'webpack-js-rules-configuration'],\n      rules,\n      params\n    );\n  }\n  /**\n   * Define the list of rules for SCSS stylesheets.\n   * This method uses the reducer event `webpack-scss-rules-configuration-for-browser` or\n   * `webpack-scss-rules-configuration-for-node`, depending on the target type, and then\n   * `webpack-scss-rules-configuration`. The event receives the rules, the `params` and expects a\n   * rules list on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Array}\n   */\n  getSCSSRules(params) {\n    const { target } = params;\n    // Set the base configuration for the CSS loader.\n    const cssLoaderConfig = {\n      // `2` because there are two other loaders after it: `resolve-url-loader` and `sass-loader`.\n      importRules: 2,\n    };\n    // If the target uses CSS modules...\n    if (target.css.modules) {\n      // ...enable them on the CSS loader configuration.\n      cssLoaderConfig.modules = true;\n      // Add the modules name format.\n      cssLoaderConfig.localIdentName = '[name]__[local]___[hash:base64:5]';\n    }\n\n    let eventName = 'webpack-scss-rules-configuration-for-node';\n    let use = [\n      {\n        loader: 'css-loader',\n        query: cssLoaderConfig,\n      },\n      'resolve-url-loader',\n      {\n        loader: 'sass-loader',\n        options: {\n          /**\n           * This is necessary for the `resolve-url-loader` to be able to find and fix the\n           * relative paths for font files.\n           */\n          sourceMap: true,\n          outputStyle: 'expanded',\n          includePaths: ['node_modules'],\n        },\n      },\n    ];\n    if (target.is.browser) {\n      eventName = 'webpack-scss-rules-configuration-for-browser';\n      // If the target needs to inject the styles on the `<head>`...\n      if (target.css.inject) {\n        // ...add the style loader.\n        use.unshift('style-loader');\n      } else {\n        // ...otherwise, wrap the loaders on the plugin that creates a single stylesheet.\n        use = ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use,\n        });\n      }\n    }\n\n    const rules = [{\n      test: /\\.scss$/i,\n      include: [\n        new RegExp(target.folders.source),\n        ...target.includeModules.map((name) => new RegExp(`/node_modules/${name}`)),\n      ],\n      use,\n    }];\n    // Reduce the rules.\n    return this._reduceConfig(\n      [eventName, 'webpack-scss-rules-configuration'],\n      rules,\n      params\n    );\n  }\n  /**\n   * Define the list of rules for CSS stylesheets.\n   * This method uses the reducer event `webpack-css-rules-configuration-for-browser` or\n   * `webpack-css-rules-configuration-for-node`, depending on the target type, and then\n   * `webpack-css-rules-configuration`. The event receives the rules, the `params` and expects a\n   * rules list on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Array}\n   */\n  getCSSRules(params) {\n    const { target } = params;\n    let eventName = 'webpack-css-rules-configuration-for-node';\n    let use = [\n      'css-loader',\n    ];\n\n    if (target.is.browser) {\n      eventName = 'webpack-css-rules-configuration-for-browser';\n      // If the target needs to inject the styles on the `<head>`...\n      if (target.css.inject) {\n        // ...add the style loader.\n        use.unshift('style-loader');\n      } else {\n        // ...otherwise, wrap the loaders on the plugin that creates a single stylesheet.\n        use = ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use,\n        });\n      }\n    }\n\n    const rules = [{\n      test: /\\.css$/i,\n      include: [\n        new RegExp(target.folders.source),\n        ...target.includeModules.map((name) => new RegExp(`/node_modules/${name}`)),\n      ],\n      use,\n    }];\n    // Reduce the rules.\n    return this._reduceConfig(\n      [eventName, 'webpack-css-rules-configuration'],\n      rules,\n      params\n    );\n  }\n  /**\n   * Define the list of rules for HTML files.\n   * This method uses the reducer event `webpack-html-rules-configuration-for-browser` or\n   * `webpack-html-rules-configuration-for-node`, depending on the target type, and then\n   * `webpack-html-rules-configuration`. The event receives the rules, the `params` and expects a\n   * rules list on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Array}\n   * @todo This should probably use the `html-loader`\n   */\n  getHTMLRules(params) {\n    const rules = [{\n      test: /\\.html?$/,\n      // Avoid template files.\n      exclude: /\\.tpl\\.html/,\n      use: [\n        'raw-loader',\n      ],\n    }];\n    // Reduce the rules.\n    const eventName = params.target.is.node ?\n      'webpack-html-rules-configuration-for-node' :\n      'webpack-html-rules-configuration-for-browser';\n    return this._reduceConfig(\n      [eventName, 'webpack-html-rules-configuration'],\n      rules,\n      params\n    );\n  }\n  /**\n   * Define the list of rules for font files.\n   * This method uses the reducer event `webpack-fonts-rules-configuration-for-browser` or\n   * `webpack-fonts-rules-configuration-for-node`, depending on the target type, and then\n   * `webpack-fonts-rules-configuration`. The event receives the rules, the `params` and expects a\n   * rules list on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Array}\n   * @todo Check if `mimetype` is supported by the file loader and if there isn't a better loader\n   *       for handling fonts than the `file-loader`.\n   */\n  getFontsRules(params) {\n    const { target, output: { fonts: name } } = params;\n    const rules = [\n      {\n        // `.svg` files inside a `fonts` folder.\n        test: /\\.svg(\\?(v=\\d+\\.\\d+\\.\\d+|\\w+))?$/,\n        include: [\n          new RegExp(`${target.paths.source}/(?:.*?/)?fonts/.*?`, 'i'),\n          ...target.includeModules.map((modName) => (\n            new RegExp(`/node_modules/${modName}/(?:.*?/)?fonts/.*?`)\n          )),\n        ],\n        use: [{\n          loader: 'file-loader',\n          options: {\n            name,\n            mimetype: 'image/svg+xml',\n          },\n        }],\n      },\n      {\n        // `.woff` files.\n        test: /\\.woff(\\?(v=\\d+\\.\\d+\\.\\d+|\\w+))?$/,\n        use: [{\n          loader: 'file-loader',\n          options: {\n            name,\n            mimetype: 'application/font-woff',\n          },\n        }],\n      },\n      {\n        /**\n         * `.woff2` files.\n         * @todo This one and `.woff` should be merged and the regex updated.\n         */\n        test: /\\.woff2(\\?(v=\\d+\\.\\d+\\.\\d+|\\w+))?$/,\n        use: [{\n          loader: 'file-loader',\n          options: {\n            name,\n            mimetype: 'application/font-woff',\n          },\n        }],\n      },\n      {\n        // `.ttf` files.\n        test: /\\.ttf(\\?(v=\\d+\\.\\d+\\.\\d+|\\w+))?$/,\n        use: [{\n          loader: 'file-loader',\n          options: {\n            name,\n            mimetype: 'application/octet-stream',\n          },\n        }],\n      },\n      {\n        // `.eot` files.\n        test: /\\.eot(\\?(v=\\d+\\.\\d+\\.\\d+|\\w+))?$/,\n        use: [{\n          loader: 'file-loader',\n          options: { name },\n        }],\n      },\n    ];\n    // Reduce the rules.\n    const eventName = params.target.is.node ?\n      'webpack-fonts-rules-configuration-for-node' :\n      'webpack-fonts-rules-configuration-for-browser';\n    return this._reduceConfig(\n      [eventName, 'webpack-fonts-rules-configuration'],\n      rules,\n      params\n    );\n  }\n  /**\n   * Define the list of rules for images files.\n   * This method uses the reducer event `webpack-images-rules-configuration-for-browser` or\n   * `webpack-images-rules-configuration-for-node`, depending on the target type, and then\n   * `webpack-images-rules-configuration`. The event receives the rules, the `params` and expects a\n   * rules list on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Array}\n   */\n  getImagesRules(params) {\n    const { target, output: { images: name } } = params;\n    const rules = [{\n      test: /\\.(jpe?g|png|gif|svg|ico)$/i,\n      exclude: [\n        /**\n         * This excludes names that match `favicon` because there are specific rules for favicons.\n         * The reason is that favicons need to be on the root directory for the browser to\n         * automatically detect them, and they only include optimization options for `png`.\n         */\n        /favicon\\.\\w+$/i,\n        // Exclude svg files that were identified as fonts.\n        new RegExp(`${target.paths.source}/(?:.*?/)?fonts/.*?`, 'i'),\n        // Exclude svg files that were identified as fonts on modules being processed.\n        ...target.includeModules.map((modName) => (\n          new RegExp(`/node_modules/${modName}/(?:.*?/)?fonts/.*?`)\n        )),\n      ],\n      use: [\n        {\n          loader: 'file-loader',\n          options: {\n            name,\n            digest: 'hex',\n          },\n        },\n        {\n          loader: 'image-webpack-loader',\n          query: {\n            mozjpeg: {\n              progressive: true,\n            },\n            gifsicle: {\n              interlaced: false,\n            },\n            optipng: {\n              optimizationLevel: 7,\n            },\n            pngquant: {\n              quality: '75-90',\n              speed: 3,\n            },\n          },\n        },\n      ],\n    }];\n    // Reduce the rules.\n    const eventName = params.target.is.node ?\n      'webpack-images-rules-configuration-for-node' :\n      'webpack-images-rules-configuration-for-browser';\n    return this._reduceConfig(\n      [eventName, 'webpack-images-rules-configuration'],\n      rules,\n      params\n    );\n  }\n  /**\n   * Define the list of rules for the favicons file.\n   * The reason this is not with the images rules is because favicons need to be on the root\n   * directory for the browser to automatically detect them, and they only include optimization\n   * options for `png`.\n   * This method uses the reducer event `webpack-favicons-rules-configuration-for-browser` or\n   * `webpack-favicons-rules-configuration-for-node`, depending on the target type, and then\n   * `webpack-favicons-rules-configuration`. The event receives the rules, the `params` and expects\n   * a rules list on return.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Array}\n   */\n  getFaviconsRules(params) {\n    const rules = [{\n      test: /\\.(png|ico)$/i,\n      // Only apply to files that match the `favicon` name/path.\n      include: /favicon\\.\\w+$/i,\n      use: [\n        {\n          loader: 'file-loader',\n          options: {\n            name: '[name].[ext]',\n            digest: 'hex',\n          },\n        },\n        {\n          loader: 'image-webpack-loader',\n          query: {\n            optipng: {\n              optimizationLevel: 7,\n            },\n            pngquant: {\n              quality: '75-90',\n              speed: 3,\n            },\n          },\n        },\n      ],\n    }];\n    // Reduce the rules.\n    const eventName = params.target.is.node ?\n      'webpack-favicons-rules-configuration-for-node' :\n      'webpack-favicons-rules-configuration-for-browser';\n    return this._reduceConfig(\n      [eventName, 'webpack-favicons-rules-configuration'],\n      rules,\n      params\n    );\n  }\n  /**\n   * Processes a list of reducer events for rules configurations.\n   * @param {Array}                      events A list of events names.\n   * @param {Object|Array}               config The configuration to reduce.\n   * @param {WebpackConfigurationParams} params A dictionary generated by the top service building\n   *                                            the configuration and that includes things like the\n   *                                            target information, its entry settings, output\n   *                                            paths, etc.\n   * @return {Object|Array}\n   * @todo Remove this once `EventsHub` adds support for it.\n   */\n  _reduceConfig(events, config, params) {\n    return events.reduce(\n      (currentConfig, eventName) => this.events.reduce(eventName, currentConfig, params),\n      config\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackRulesConfiguration` as the `webpackRulesConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(webpackRulesConfiguration);\n * // Getting access to the service instance\n * const webpackRulesConfiguration = container.get('webpackRulesConfiguration');\n * @type {Provider}\n */\nconst webpackRulesConfiguration = provider((app) => {\n  app.set('webpackRulesConfiguration', () => new WebpackRulesConfiguration(\n    app.get('babelConfiguration'),\n    app.get('events'),\n    app.get('pathUtils')\n  ));\n});\n\nmodule.exports = {\n  WebpackRulesConfiguration,\n  webpackRulesConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/configurations/rulesConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "WebpackRulesConfiguration",
    "memberof": "src/services/configurations/rulesConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/rulesConfiguration.js",
    "importStyle": "{WebpackRulesConfiguration}",
    "description": "Define the Webpack configuration rules for basic types of assets: Javascript, stylesheets,\nimages and fonts.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 157,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "BabelConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "babelConfiguration",
        "description": "Used to configure the `babel-loader`."
      },
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce each set of rules and the entire\n                                                 configuration."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Required by `ConfigurationFile` in order to\n                                                 build the path to the overwrite file."
      }
    ]
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "babelConfiguration",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#babelConfiguration",
    "access": "public",
    "description": "A local reference for the `babelConfiguration` service.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "BabelConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#createConfig",
    "access": "public",
    "description": "Creates the rules configuration for the required target.\nThis method uses the reducer events `webpack-rules-configuration-for-node` or\n`webpack-rules-configuration-for-browser`, depending on the target type, and then\n`webpack-rules-configuration`. The event receives the configuration object, the `params` and\nit expects an updated configuration object on return.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "rules",
        "description": "The list of rules"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "getJSRules",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#getJSRules",
    "access": "public",
    "description": "Defines the list of rules for Javascript files.\nThis method uses the reducer event `webpack-js-rules-configuration-for-browser` or\n`webpack-js-rules-configuration-for-node`, depending on the target type, and then\n`webpack-js-rules-configuration`. The event receives the rules, the `params` and expects a\nrules list on return.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "getSCSSRules",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#getSCSSRules",
    "access": "public",
    "description": "Define the list of rules for SCSS stylesheets.\nThis method uses the reducer event `webpack-scss-rules-configuration-for-browser` or\n`webpack-scss-rules-configuration-for-node`, depending on the target type, and then\n`webpack-scss-rules-configuration`. The event receives the rules, the `params` and expects a\nrules list on return.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "getCSSRules",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#getCSSRules",
    "access": "public",
    "description": "Define the list of rules for CSS stylesheets.\nThis method uses the reducer event `webpack-css-rules-configuration-for-browser` or\n`webpack-css-rules-configuration-for-node`, depending on the target type, and then\n`webpack-css-rules-configuration`. The event receives the rules, the `params` and expects a\nrules list on return.",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "getHTMLRules",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#getHTMLRules",
    "access": "public",
    "description": "Define the list of rules for HTML files.\nThis method uses the reducer event `webpack-html-rules-configuration-for-browser` or\n`webpack-html-rules-configuration-for-node`, depending on the target type, and then\n`webpack-html-rules-configuration`. The event receives the rules, the `params` and expects a\nrules list on return.",
    "lineNumber": 241,
    "todo": [
      "This should probably use the `html-loader`"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "getFontsRules",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#getFontsRules",
    "access": "public",
    "description": "Define the list of rules for font files.\nThis method uses the reducer event `webpack-fonts-rules-configuration-for-browser` or\n`webpack-fonts-rules-configuration-for-node`, depending on the target type, and then\n`webpack-fonts-rules-configuration`. The event receives the rules, the `params` and expects a\nrules list on return.",
    "lineNumber": 274,
    "todo": [
      "Check if `mimetype` is supported by the file loader and if there isn't a better loader\n      for handling fonts than the `file-loader`."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "getImagesRules",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#getImagesRules",
    "access": "public",
    "description": "Define the list of rules for images files.\nThis method uses the reducer event `webpack-images-rules-configuration-for-browser` or\n`webpack-images-rules-configuration-for-node`, depending on the target type, and then\n`webpack-images-rules-configuration`. The event receives the rules, the `params` and expects a\nrules list on return.",
    "lineNumber": 361,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getFaviconsRules",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#getFaviconsRules",
    "access": "public",
    "description": "Define the list of rules for the favicons file.\nThe reason this is not with the images rules is because favicons need to be on the root\ndirectory for the browser to automatically detect them, and they only include optimization\noptions for `png`.\nThis method uses the reducer event `webpack-favicons-rules-configuration-for-browser` or\n`webpack-favicons-rules-configuration-for-node`, depending on the target type, and then\n`webpack-favicons-rules-configuration`. The event receives the rules, the `params` and expects\na rules list on return.",
    "lineNumber": 432,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "_reduceConfig",
    "memberof": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/rulesConfiguration.js~WebpackRulesConfiguration#_reduceConfig",
    "access": "private",
    "description": "Processes a list of reducer events for rules configurations.",
    "lineNumber": 480,
    "todo": [
      "Remove this once `EventsHub` adds support for it."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "A list of events names."
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration to reduce."
      },
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "A dictionary generated by the top service building\n                                           the configuration and that includes things like the\n                                           target information, its entry settings, output\n                                           paths, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "webpackRulesConfiguration",
    "memberof": "src/services/configurations/rulesConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/rulesConfiguration.js~webpackRulesConfiguration",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/configurations/rulesConfiguration.js",
    "importStyle": "{webpackRulesConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackRulesConfiguration` as the `webpackRulesConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackRulesConfiguration);\n// Getting access to the service instance\nconst webpackRulesConfiguration = container.get('webpackRulesConfiguration');"
    ],
    "lineNumber": 497,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/services/server/index.js",
    "content": "const { webpackMiddlewares } = require('./middlewares');\n\nmodule.exports = {\n  webpackMiddlewares,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/services/server/middlewares.js",
    "content": "const webpack = require('webpack');\nconst webpackRealDevMiddleware = require('webpack-dev-middleware');\nconst webpackRealHotMiddleware = require('webpack-hot-middleware');\nconst { provider } = require('jimple');\nconst { deferred } = require('wootils/shared');\n/**\n * This service creates and manages middlewares for Webpack server implementations.\n */\nclass WebpackMiddlewares {\n  /**\n   * Class constructor.\n   * @param {Events}               events               To reduce the middlewares configuration.\n   * @param {Targets}              targets              To get targets information.\n   * @param {WebpackConfiguration} webpackConfiguration To get a target Webpack configuration in\n   *                                                    order to instantiate the middlewares.\n   */\n  constructor(events, targets, webpackConfiguration) {\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * A local reference for the `webpackConfiguration` service.\n     * @type {WebpackConfiguration}\n     */\n    this.webpackConfiguration = webpackConfiguration;\n    /**\n     * A dictionary with the dev middlewares. It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._devMiddlewares = {};\n    /**\n     * A dictionary with the hot middlewares. It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._hotMiddlewares = {};\n    /**\n     * A dictionary of flags that indicate if a target middleware file system is ready to be used.\n     * A middleware file system is not ready until Webpack finishes compiling the code.\n     * It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._fileSystemsReady = {};\n    /**\n     * A dictionary of deffered promises the service uses to return when asked for a file system\n     * while its middleware hasn't finished compiling.\n     * It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._fileSystemsDeferreds = {};\n    /**\n     * A dictionary of directories the middlewares use as root for their file system.\n     * It uses the targets names as the keys.\n     * @type {Object}\n     * @ignore\n     * @access protected\n     */\n    this._directories = {};\n    /**\n     * A list with the names of the targets which dev middlewares have finished compiling.\n     * @type {Array}\n     * @ignore\n     * @access protected\n     */\n    this._compiled = [];\n  }\n  /**\n   * Generate the middlewares for a given target.\n   * @param {string} targetToBuild The name of the target that will be builded on the middleware(s).\n   * @param {string} targetToServe The name of the target that will implement the middleware(s).\n   *                               When the other target is builded, it will assume that is on the\n   *                               distribution directory, and if the target serving it is being\n   *                               executed from the source directory it won't be able to use the\n   *                               dev middleware file system without hardcoding some relatives\n   *                               paths from the build to the source; to avoid that, the method\n   *                               gets the build path of this target, so when using\n   *                               `getDirectory()`, it will think they are both on the\n   *                               distribution directory and the paths can be created relative to\n   *                               that.\n   * @return {MiddlewaresInformation}\n   */\n  generate(targetToBuild, targetToServe) {\n    // Get the target information.\n    const target = this.targets.getTarget(targetToBuild);\n    // Set the flag indicating the dev middleware file system is not ready.\n    this._fileSystemsReady[targetToBuild] = false;\n    // Create the deferred promise for when the dev middleware file system is ready.\n    this._fileSystemsDeferreds[targetToBuild] = deferred();\n    // Set the target working directory as the target that serves it build folder\n    this._directories[targetToBuild] = this.targets.getTarget(targetToServe).paths.build;\n    // Create the list of middlewares with just the dev middleware.\n    const middlewares = [\n      () => this.devMiddleware(target),\n    ];\n    // If the target uses hot replacement...\n    if (target.hot) {\n      // ...pubsh the function that returns the hot middleware.\n      middlewares.push(() => this.hotMiddleware(target));\n    }\n    // Define the functions to get the file system promise and the middleware root directory.\n    const getFileSystem = () => this.fileSystem(target);\n    const getDirectory = () => this._directories[target.name];\n\n    return {\n      getDirectory,\n      getFileSystem,\n      middlewares,\n    };\n  }\n  /**\n   * Get access to a target dev middleware.\n   * @param {Target} target The target for which the middleware is.\n   * @return {Middleware}\n   */\n  devMiddleware(target) {\n    return this._compile(target).devMiddleware;\n  }\n  /**\n   * Get access to a target hot middleware.\n   * @param {Target} target The target for which the middleware is.\n   * @return {Middleware}\n   */\n  hotMiddleware(target) {\n    return this._compile(target).hotMiddleware;\n  }\n  /**\n   * Get access to a target dev middleware file system.\n   * @param {Target} target The target owner of the middleware.\n   * @return {Promise<FileSystem,Error>}\n   */\n  fileSystem(target) {\n    return this._fileSystemsReady[target.name] ?\n      Promise.resolve(this._fileSystem(target)) :\n      this._fileSystemsDeferreds[target.name].promise;\n  }\n  /**\n   * The `fileSystem` method only returns promises, but this is the one that gets the middleware\n   * and returns its file system.\n   * @param {Target} target The target owner of the middleware.\n   * @return {FileSystem}\n   */\n  _fileSystem(target) {\n    return this.devMiddleware(target).fileSystem;\n  }\n  /**\n   * This method gets called every time another method fromt the service needs to access a\n   * middleware or a middleware property, and what it does is: Checks if the target has a compiled\n   * middleware, and if it's not ready, it creates the middleware and compiles them, otherwise, it\n   * just returns the saved instances.\n   * This method uses the reducer event `webpack-configuration-for-middleware`, which sends the\n   * middleware options, the target information, and expects an object with middleware options on\n   * return.\n   * @param {Target} target The target for which the middlewares are for.\n   * @return {object}\n   * @property {middleware}  devMiddleware An instance of the Webpack dev middleware created for\n   *                                       the target.\n   * @property {?middleware} hotMiddleware An instance of the Webpack hot middleware, if needed\n   *                                       by the target.\n   * @property {string}      directory     The build directory of the target implementing the\n   *                                       middleware.\n   * @ignore\n   * @access protected\n   */\n  _compile(target) {\n    if (!this._compiled.includes(target.name)) {\n      this._compiled.push(target.name);\n      const configuration = this.webpackConfiguration.getConfig(target, 'development');\n      configuration.plugins.push(this._getFileSystemStatusPlugin(target));\n\n      const compiler = webpack(configuration);\n      const middlewareOptions = {\n        publicPath: configuration.output.publicPath,\n        stats: {\n          colors: true,\n          hash: false,\n          timings: true,\n          chunks: false,\n          chunkModules: false,\n          modules: false,\n        },\n      };\n      this._devMiddlewares[target.name] = webpackRealDevMiddleware(\n        compiler,\n        this.events.reduce(\n          'webpack-configuration-for-middleware',\n          middlewareOptions,\n          target\n        )\n      );\n\n      if (target.hot) {\n        this._hotMiddlewares[target.name] = webpackRealHotMiddleware(compiler);\n      }\n    }\n\n    return {\n      devMiddleware: this._devMiddlewares[target.name],\n      hotMiddleware: this._hotMiddlewares[target.name],\n      directory: this._directories[target.name],\n    };\n  }\n  /**\n   * Creates a _'fake Webpack plugin'_ that detects when the bundle finishes compiling and let\n   * the service know that the file system can accessed now.\n   * @param {Target} target The target owner of the middleware.\n   * @return {object} A webpack plugin.\n   * @ignore\n   * @access protected\n   */\n  _getFileSystemStatusPlugin(target) {\n    return {\n      apply: (compiler) => {\n        compiler.plugin('done', () => {\n          // Mark the file system as ready.\n          this._fileSystemsReady[target.name] = true;\n          // Resolve the deferred promise.\n          this._fileSystemsDeferreds[target.name].resolve(\n            this._fileSystem(target)\n          );\n        });\n      },\n    };\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `WebpackMiddlewares` as the `webpackMiddlewares` service.\n * @example\n * // Register it on the container\n * container.register(webpackMiddlewares);\n * // Getting access to the service instance\n * const webpackMiddlewares = container.get('webpackMiddlewares');\n * @type {Provider}\n */\nconst webpackMiddlewares = provider((app) => {\n  app.set('webpackMiddlewares', () => new WebpackMiddlewares(\n    app.get('events'),\n    app.get('targets'),\n    app.get('webpackConfiguration')\n  ));\n});\n\nmodule.exports = {\n  WebpackMiddlewares,\n  webpackMiddlewares,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/services/server/middlewares.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "WebpackMiddlewares",
    "memberof": "src/services/server/middlewares.js",
    "static": true,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/server/middlewares.js",
    "importStyle": "{WebpackMiddlewares}",
    "description": "This service creates and manages middlewares for Webpack server implementations.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the middlewares configuration."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To get targets information."
      },
      {
        "nullable": null,
        "types": [
          "WebpackConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "webpackConfiguration",
        "description": "To get a target Webpack configuration in\n                                                   order to instantiate the middlewares."
      }
    ]
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "webpackConfiguration",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#webpackConfiguration",
    "access": "public",
    "description": "A local reference for the `webpackConfiguration` service.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "WebpackConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "_devMiddlewares",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_devMiddlewares",
    "access": "protected",
    "description": "A dictionary with the dev middlewares. It uses the targets names as the keys.",
    "lineNumber": 39,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "_hotMiddlewares",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_hotMiddlewares",
    "access": "protected",
    "description": "A dictionary with the hot middlewares. It uses the targets names as the keys.",
    "lineNumber": 46,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "_fileSystemsReady",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_fileSystemsReady",
    "access": "protected",
    "description": "A dictionary of flags that indicate if a target middleware file system is ready to be used.\nA middleware file system is not ready until Webpack finishes compiling the code.\nIt uses the targets names as the keys.",
    "lineNumber": 55,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "_fileSystemsDeferreds",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_fileSystemsDeferreds",
    "access": "protected",
    "description": "A dictionary of deffered promises the service uses to return when asked for a file system\nwhile its middleware hasn't finished compiling.\nIt uses the targets names as the keys.",
    "lineNumber": 64,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "_directories",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_directories",
    "access": "protected",
    "description": "A dictionary of directories the middlewares use as root for their file system.\nIt uses the targets names as the keys.",
    "lineNumber": 72,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "_compiled",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_compiled",
    "access": "protected",
    "description": "A list with the names of the targets which dev middlewares have finished compiling.",
    "lineNumber": 79,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "generate",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#generate",
    "access": "public",
    "description": "Generate the middlewares for a given target.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToBuild",
        "description": "The name of the target that will be builded on the middleware(s)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetToServe",
        "description": "The name of the target that will implement the middleware(s).\n                              When the other target is builded, it will assume that is on the\n                              distribution directory, and if the target serving it is being\n                              executed from the source directory it won't be able to use the\n                              dev middleware file system without hardcoding some relatives\n                              paths from the build to the source; to avoid that, the method\n                              gets the build path of this target, so when using\n                              `getDirectory()`, it will think they are both on the\n                              distribution directory and the paths can be created relative to\n                              that."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MiddlewaresInformation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "devMiddleware",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#devMiddleware",
    "access": "public",
    "description": "Get access to a target dev middleware.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target for which the middleware is."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Middleware"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "hotMiddleware",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#hotMiddleware",
    "access": "public",
    "description": "Get access to a target hot middleware.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target for which the middleware is."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Middleware"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "fileSystem",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#fileSystem",
    "access": "public",
    "description": "Get access to a target dev middleware file system.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target owner of the middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<FileSystem,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "_fileSystem",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_fileSystem",
    "access": "private",
    "description": "The `fileSystem` method only returns promises, but this is the one that gets the middleware\nand returns its file system.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target owner of the middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileSystem"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "_compile",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_compile",
    "access": "protected",
    "description": "This method gets called every time another method fromt the service needs to access a\nmiddleware or a middleware property, and what it does is: Checks if the target has a compiled\nmiddleware, and if it's not ready, it creates the middleware and compiles them, otherwise, it\njust returns the saved instances.\nThis method uses the reducer event `webpack-configuration-for-middleware`, which sends the\nmiddleware options, the target information, and expects an object with middleware options on\nreturn.",
    "lineNumber": 178,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target for which the middlewares are for."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "middleware"
        ],
        "spread": false,
        "optional": false,
        "name": "devMiddleware",
        "description": "An instance of the Webpack dev middleware created for\n                                      the target."
      },
      {
        "nullable": true,
        "types": [
          "middleware"
        ],
        "spread": false,
        "optional": false,
        "name": "hotMiddleware",
        "description": "An instance of the Webpack hot middleware, if needed\n                                      by the target."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The build directory of the target implementing the\n                                      middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "_getFileSystemStatusPlugin",
    "memberof": "src/services/server/middlewares.js~WebpackMiddlewares",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/server/middlewares.js~WebpackMiddlewares#_getFileSystemStatusPlugin",
    "access": "protected",
    "description": "Creates a _'fake Webpack plugin'_ that detects when the bundle finishes compiling and let\nthe service know that the file system can accessed now.",
    "lineNumber": 224,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target owner of the middleware."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "A webpack plugin."
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "webpackMiddlewares",
    "memberof": "src/services/server/middlewares.js",
    "static": true,
    "longname": "src/services/server/middlewares.js~webpackMiddlewares",
    "access": "public",
    "export": true,
    "importPath": "projext-plugin-webpack/src/services/server/middlewares.js",
    "importStyle": "{webpackMiddlewares}",
    "description": "The service provider that once registered on the app container will set an instance of\n`WebpackMiddlewares` as the `webpackMiddlewares` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(webpackMiddlewares);\n// Getting access to the service instance\nconst webpackMiddlewares = container.get('webpackMiddlewares');"
    ],
    "lineNumber": 249,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/typedef.js",
    "content": "/**\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n */\n\n/**\n * @external {Jimpex}\n * https://yarnpkg.com/en/package/jimpex\n */\n\n/**\n * @external {Express}\n * https://expressjs.com\n */\n\n/**\n * @external {FileSystem}\n * https://nodejs.org/api/fs.html\n */\n\n/**\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n */\n\n/**\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n */\n\n/**\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n */\n\n/**\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n */\n\n/**\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n */\n\n/**\n * @external {Projext}\n * https://homer0.github.io/projext/class/src/app/index.js~Projext.html\n */\n\n/**\n * @external {BuildVersion}\n * https://homer0.github.io/projext/class/src/services/building/buildVersion.js~BuildVersion.html\n */\n\n/**\n * @external {Events}\n * https://homer0.github.io/projext/class/src/services/common/events.js~Events.html\n */\n\n/**\n * @external {Targets}\n * https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html\n */\n\n/**\n * @external {TargetsHTML}\n * https://homer0.github.io/projext/class/src/services/targets/targetsHTML.js~TargetsHTML.html\n */\n\n/**\n * @external {Target}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-Target\n */\n\n/**\n * @external {BrowserTarget}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-BrowserTarget\n */\n\n/**\n * @external {TargetConfigurationCreator}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetConfigurationCreator\n */\n\n/**\n * @external {ProjectConfigurationSettings}\n * https://homer0.github.io/projext/typedef/index.html#static-typedef-ProjectConfigurationSettings\n */\n\n/**\n * @external {BabelConfiguration}\n * https://homer0.github.io/projext/class/src/services/configurations/babelConfiguration.js~BabelConfiguration.html\n */\n\n/**\n * @external {Middleware}\n * http://expressjs.com/en/guide/using-middleware.html\n */\n\n/**\n * @typedef {function} DevMiddlewareGetDirectory\n * @return {string}\n * The build directory of the target implementing the dev middleware.\n */\n\n/**\n * @typedef {function} DevMiddlewareGetFileSystem\n * @return {Promise<FileSystem,Error>}\n * The reason this is resolved on a promise is to avoid trying to accessing files before they are\n * generated.\n */\n\n/**\n * @typedef {Object} MiddlewaresInformation\n * @property {Array} middlewares\n * A list of functions that when executed return a Node middleware.\n * @property {DevMiddlewareGetDirectory} getDirectory\n * To access the target implementing the middleware build directory.\n * @property {DevMiddlewareGetFileSystem} getFileSystem\n * To access the webpack dev middleware _\"virtual filesystem\"_.\n */\n\n/**\n * @typedef {Object} WebpackConfigurationsByEnvironment\n * @property {ConfigurationFile} production\n * The configuration service for a the target type production build.\n * @property {ConfigurationFile} development\n * The configuration service for a the target type development build.\n */\n\n/**\n * @typedef {Object} WebpackConfigurations\n * @property {WebpackConfigurationsByEnvironment} node\n * The build types configurations for a Node target.\n * @property {WebpackConfigurationsByEnvironment} browser\n * The build types configurations for a browser target.\n */\n\n/**\n * @typedef {Object} WebpackConfigurationTargetOutput\n * @property {string} js\n * The filename format and path for the bundle, on the distribution directory.\n * @property {?string} css\n * The filename format and path for the generated stylesheet, on the distribution directory.\n * This path is only available for {@link BrowserTarget}s\n * @property {?string} images\n * The filename format and path for the images that are going to be copied to the distribution\n * directory.\n * This path is only available for {@link BrowserTarget}s\n * @property {?string} fonts\n * The filename format and path for the font files that are going to be copied to the distribution\n * directory.\n * This path is only available for {@link BrowserTarget}s\n */\n\n/**\n * @typedef {Object} WebpackConfigurationParams\n * @property {Target} target\n * The target information.\n * @property {Object} entry\n * A dictionary with the `entry` setting for a webpack configuration, generated with the target\n * information.\n * @property {WebpackConfigurationTargetOutput} output\n * A dictionary with the filenames formats and paths of the different files the bundle can\n * generate.\n * @property {Object} definitions\n * A dictionary of defined variables that will be replaced on the bundled code.\n * @property {string} buildType\n * The intended built type: `development` or `production`.\n */\n\n/**\n * @typedef {Object} TargetDevServerSSLSettings\n * @property {string} key\n * The path to the SSL key (`.key`).\n * @property {string} cert\n * The path to the SSL certificate (`.crt`).\n * @property {string} ca\n * The path to the SSL public file (`.pem`).\n */\n\n/**\n * @typedef {Object} TargetDevServerProxiedSettings\n * @property {boolean} enabled\n * Whether or not the dev server is being proxied.\n * @property {string} host\n * The host used to proxy the dev server.\n * @property {boolean} https\n * Whether or not the proxied host uses `https`.\n */\n\n/**\n * @typedef {Object} TargetDevServerSettings\n * @property {number} port\n * The server port.\n * @property {string} host\n * The dev server hostname.\n * @property {string} url\n * The complete URL for the dev server.\n * @property {boolean} reload\n * Whether or not to reload the server when the code changes.\n * @property {?TargetDevServerSSLSettings} ssl\n * The paths to the files to enable SSL on the dev server.\n * @property {?TargetDevServerProxiedSettings} [proxied]\n * When the dev server is being proxied (using `nginx` for example), there are certain\n * functionalities, like hot module replacement and live reload, that need to be aware of this.\n */\n\n/**\n * @typedef {function} ProviderRegisterMethod\n * @param {Jimple} app\n * A reference to the dependency injection container.\n */\n\n/**\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called when registering the provider.\n */\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/src/typedef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "external",
    "name": "Jimple",
    "externalLink": "https://yarnpkg.com/en/package/jimple",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Jimple",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 193,
    "kind": "external",
    "name": "Jimpex",
    "externalLink": "https://yarnpkg.com/en/package/jimpex",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Jimpex",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 194,
    "kind": "external",
    "name": "Express",
    "externalLink": "https://expressjs.com",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Express",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 195,
    "kind": "external",
    "name": "FileSystem",
    "externalLink": "https://nodejs.org/api/fs.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~FileSystem",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 196,
    "kind": "external",
    "name": "PathUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~PathUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 197,
    "kind": "external",
    "name": "Logger",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Logger",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 198,
    "kind": "external",
    "name": "EnvironmentUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~EnvironmentUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 199,
    "kind": "external",
    "name": "ErrorHandler",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ErrorHandler",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 200,
    "kind": "external",
    "name": "RootRequire",
    "externalLink": "https://homer0.github.io/wootils/function/index.html#static-function-rootRequire",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RootRequire",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 201,
    "kind": "external",
    "name": "Projext",
    "externalLink": "https://homer0.github.io/projext/class/src/app/index.js~Projext.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Projext",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 202,
    "kind": "external",
    "name": "BuildVersion",
    "externalLink": "https://homer0.github.io/projext/class/src/services/building/buildVersion.js~BuildVersion.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BuildVersion",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 203,
    "kind": "external",
    "name": "Events",
    "externalLink": "https://homer0.github.io/projext/class/src/services/common/events.js~Events.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Events",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 204,
    "kind": "external",
    "name": "Targets",
    "externalLink": "https://homer0.github.io/projext/class/src/services/targets/targets.js~Targets.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Targets",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 205,
    "kind": "external",
    "name": "TargetsHTML",
    "externalLink": "https://homer0.github.io/projext/class/src/services/targets/targetsHTML.js~TargetsHTML.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetsHTML",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 206,
    "kind": "external",
    "name": "Target",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-Target",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Target",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 207,
    "kind": "external",
    "name": "BrowserTarget",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-BrowserTarget",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BrowserTarget",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 208,
    "kind": "external",
    "name": "TargetConfigurationCreator",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-TargetConfigurationCreator",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetConfigurationCreator",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 209,
    "kind": "external",
    "name": "ProjectConfigurationSettings",
    "externalLink": "https://homer0.github.io/projext/typedef/index.html#static-typedef-ProjectConfigurationSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationSettings",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 210,
    "kind": "external",
    "name": "BabelConfiguration",
    "externalLink": "https://homer0.github.io/projext/class/src/services/configurations/babelConfiguration.js~BabelConfiguration.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BabelConfiguration",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 211,
    "kind": "external",
    "name": "Middleware",
    "externalLink": "http://expressjs.com/en/guide/using-middleware.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Middleware",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 212,
    "kind": "typedef",
    "name": "DevMiddlewareGetDirectory",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~DevMiddlewareGetDirectory",
    "access": "public",
    "description": "",
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The build directory of the target implementing the dev middleware."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "DevMiddlewareGetDirectory"
    }
  },
  {
    "__docId__": 213,
    "kind": "typedef",
    "name": "DevMiddlewareGetFileSystem",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~DevMiddlewareGetFileSystem",
    "access": "public",
    "description": "",
    "return": {
      "nullable": null,
      "types": [
        "Promise<FileSystem,Error>"
      ],
      "spread": false,
      "description": "The reason this is resolved on a promise is to avoid trying to accessing files before they are\ngenerated."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "DevMiddlewareGetFileSystem"
    }
  },
  {
    "__docId__": 214,
    "kind": "typedef",
    "name": "MiddlewaresInformation",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~MiddlewaresInformation",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewares",
        "description": "A list of functions that when executed return a Node middleware."
      },
      {
        "nullable": null,
        "types": [
          "DevMiddlewareGetDirectory"
        ],
        "spread": false,
        "optional": false,
        "name": "getDirectory",
        "description": "To access the target implementing the middleware build directory."
      },
      {
        "nullable": null,
        "types": [
          "DevMiddlewareGetFileSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "getFileSystem",
        "description": "To access the webpack dev middleware _\"virtual filesystem\"_."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "MiddlewaresInformation"
    }
  },
  {
    "__docId__": 215,
    "kind": "typedef",
    "name": "WebpackConfigurationsByEnvironment",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~WebpackConfigurationsByEnvironment",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": false,
        "name": "production",
        "description": "The configuration service for a the target type production build."
      },
      {
        "nullable": null,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": false,
        "name": "development",
        "description": "The configuration service for a the target type development build."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WebpackConfigurationsByEnvironment"
    }
  },
  {
    "__docId__": 216,
    "kind": "typedef",
    "name": "WebpackConfigurations",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~WebpackConfigurations",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationsByEnvironment"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The build types configurations for a Node target."
      },
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationsByEnvironment"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": "The build types configurations for a browser target."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WebpackConfigurations"
    }
  },
  {
    "__docId__": 217,
    "kind": "typedef",
    "name": "WebpackConfigurationTargetOutput",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~WebpackConfigurationTargetOutput",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "js",
        "description": "The filename format and path for the bundle, on the distribution directory."
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "css",
        "description": "The filename format and path for the generated stylesheet, on the distribution directory.\nThis path is only available for {@link BrowserTarget}s"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "The filename format and path for the images that are going to be copied to the distribution\ndirectory.\nThis path is only available for {@link BrowserTarget}s"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fonts",
        "description": "The filename format and path for the font files that are going to be copied to the distribution\ndirectory.\nThis path is only available for {@link BrowserTarget}s"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WebpackConfigurationTargetOutput"
    }
  },
  {
    "__docId__": 218,
    "kind": "typedef",
    "name": "WebpackConfigurationParams",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~WebpackConfigurationParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "A dictionary with the `entry` setting for a webpack configuration, generated with the target\ninformation."
      },
      {
        "nullable": null,
        "types": [
          "WebpackConfigurationTargetOutput"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "A dictionary with the filenames formats and paths of the different files the bundle can\ngenerate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "definitions",
        "description": "A dictionary of defined variables that will be replaced on the bundled code."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended built type: `development` or `production`."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "WebpackConfigurationParams"
    }
  },
  {
    "__docId__": 219,
    "kind": "typedef",
    "name": "TargetDevServerSSLSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetDevServerSSLSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The path to the SSL key (`.key`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cert",
        "description": "The path to the SSL certificate (`.crt`)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ca",
        "description": "The path to the SSL public file (`.pem`)."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TargetDevServerSSLSettings"
    }
  },
  {
    "__docId__": 220,
    "kind": "typedef",
    "name": "TargetDevServerProxiedSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetDevServerProxiedSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "Whether or not the dev server is being proxied."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": "The host used to proxy the dev server."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "https",
        "description": "Whether or not the proxied host uses `https`."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TargetDevServerProxiedSettings"
    }
  },
  {
    "__docId__": 221,
    "kind": "typedef",
    "name": "TargetDevServerSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetDevServerSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "port",
        "description": "The server port."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": "The dev server hostname."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The complete URL for the dev server."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reload",
        "description": "Whether or not to reload the server when the code changes."
      },
      {
        "nullable": true,
        "types": [
          "TargetDevServerSSLSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "ssl",
        "description": "The paths to the files to enable SSL on the dev server."
      },
      {
        "nullable": true,
        "types": [
          "TargetDevServerProxiedSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "proxied",
        "description": "When the dev server is being proxied (using `nginx` for example), there are certain\nfunctionalities, like hot module replacement and live reload, that need to be aware of this."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TargetDevServerSettings"
    }
  },
  {
    "__docId__": 222,
    "kind": "typedef",
    "name": "ProviderRegisterMethod",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProviderRegisterMethod",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "Jimple"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "A reference to the dependency injection container."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProviderRegisterMethod"
    }
  },
  {
    "__docId__": 223,
    "kind": "typedef",
    "name": "Provider",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Provider",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProviderRegisterMethod"
        ],
        "spread": false,
        "optional": false,
        "name": "register",
        "description": "The method that gets called when registering the provider."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Provider"
    }
  },
  {
    "kind": "index",
    "content": "# projext plugin for webpack\n\nAllows [projext](https://yarnpkg.com/en/package/projext) to use [webpack](https://webpack.js.org) as a build engine.\n\n## Introduction\n\n[projext](https://yarnpkg.com/en/package/projext) allows you to configure a project without adding specific settings for a module bundler, then you can decide which build engine to use. This plugin allows you to bundle your projext project targets using [webpack](https://webpack.js.org).\n\n### Node targets\n\n- It only handles Javascript files.\n- It uses [`webpack-node-utils`](https://yarnpkg.com/en/package/webpack-node-utils) to execute the target.\n\n### Browser targets\n\n- It handles Javascript files, stylesheets (CSS and SCSS), images, favicons and fonts.\n- It uses the [`webpack-dev-server`](https://yarnpkg.com/en/package/webpack-dev-server) to run the target.\n\n## Information\n\n| -            | -                                                                             |\n|--------------|-------------------------------------------------------------------------------|\n| Package      | projext-plugin-webpack                                                        |\n| Description  | Allows projext to use webpack as a build engine.                              |\n| Node Version | >= v6.10.0                                                                    |\n\n## Usage\n\nSince webpack is the default build engine for projext, after you install the plugin there's nothing else to do, just run the build command and the plugin will take care of the rest:\n\n```bash\nprojext build [target-name]\n```\n\nIn the case you changed the engine and you want to restore it to webpack, you just need to go to your projext configuration file, on your target settings, change `engine` to `webpack`:\n\n```js\n// projext.config.js\n\nmodule.exports = {\n  targets: {\n    myTarget: {\n      type: 'browser',\n      engine: 'webpack',\n    },\n  },\n};\n```\n\n### Middleware implementation\n\nYou can implement both the [`webpack-dev-middleware`](https://yarnpkg.com/en/package/webpack-dev-middleware) and the [`webpack-hot-middleware`](https://yarnpkg.com/en/package/webpack-hot-middleware) on [Express](https://expressjs.com) and [Jimpex](https://yarnpkg.com/en/package/jimpex) very easy:\n\n#### Express\n\n```js\n// Require the function for the implementation\nconst useExpress = require('projext-plugin-webpack/express');\n\n// Require Express to create a dummy app\nconst express = require('express');\n\n// Create the app\nconst app = express();\n\n// Tell the plugin to configure the necessary middlewares for the `myApp` target to be served by the\n// `myServer` target\nuseExpress(app, 'myApp', 'myServer');\n\n// Start the app\napp.listen(...);\n```\n\n#### Jimpex\n\n```js\n// Require the function for the implementation\nconst useJimpex = require('projext-plugin-webpack/jimpex');\n\n// Require Jimpex to create a dummy app\nconst { Jimpex } = require('jimpex');\n\n// Define the Jimpex app\nclass DevApp extends Jimpex {\n  boot() {\n    // This method needs to be created.\n  }\n}\n\n// Create the app\nconst app = new DevApp();\n\n// Tell the plugin to configure the necessary middlewares for the `myApp` target to be served by the\n// `myServer` target\nuseJimpex(app, 'myApp', 'myServer');\n\n// Start the app\napp.start();\n```\n\n#### Accessing the dev middleware files\n\nBoth `useExpress` and `useJimpex` return and object with the following properties:\n\n- `middlewares`: A list with the implemented middlewares.\n- `getDirectory`: A function that returns the build directory of the target implementing the middleware(s).\n- `getFileSystem`: A function that returns a promise with the instance of the _\"virtual file system\"_ the middleware uses to read and write the files in memory.\n\n### Extending/Overwriting the configuration\n\nThis plugin has `6` different configuration services:\n\n- Base configuration.\n- Rules configuration.\n- Browser targets configuration for development.\n- Browser targets configuration for production.\n- Node targets configuration for development.\n- Node targets configuration for production.\n\nThey can be easily extended/overwritten by creating a file on your project with an specific name.\n\nAll the configurations receive a single object parameter with the following properties:\n\n- `target`: It has all the information for the target being bundled.\n- `entry`: A dictionary with the `entry` setting for a webpack configuration, generated with the target information.\n- `output`: A dictionary with the filenames formats and paths of the different files the bundle can generate (`js`, `css`, `images` and `fonts`).\n- `definitions`: A dictionary of defined variables that will be replaced on the bundled code.\n\n#### Base configuration\n\nThis is the top level configuration, the one a regular `webpack.config.js` file would export.\n\nTo extend/overwrite this configuration you would need to create a file with the following path: `config/webpack/base.config.js`. For example:\n\n```js\n// config/webpack/base.config.js\n\nmodule.exports = (params) => ({\n  resolve: {\n    extensions: ['.js', '.jsx', '.tsx'],\n  },\n});\n```\n\n#### Rules configuration\n\nThis is what you would normally found inside `module.rules`. It has all the rules to handle the different file types, based on a target type: If it's a Node target, it will only handle Javascript; but if the target is for browsers, it will also handle stylesheets, images and fonts.\n\nTo extend/overwrite this configuration you would need to create a file with the following path: `config/webpack/rules.config.js`. For example:\n\n```js\n// config/webpack/rules.config.js\n\nmodule.exports = (params) => ({\n  rules: [{\n    test: /\\.tsx?$/i,\n    use: [\n      'babel-loader',\n      'ts-loader',\n    ],\n  }]\n});\n```\n\n#### Browser targets configuration for development and production\n\nThese configurations handles the specifics of a browser target: `entry`, `output` and `plugins`.\n\nTo extend/overwrite these configurations you would need to create a file with the following path: `config/webpack/browser.development.config.js` or `config/webpack/browser.production.config.js`. For example:\n\n```js\n// config/webpack/browser.development.config.js\n\nmodule.exports = (params) => ({\n  devtool: 'eval',\n});\n```\n\n### Node targets configuration for development and production\n\nThese configurations handles the specifics of a Node target: `entry`, `output` and `plugins`.\n\nTo extend/overwrite these configurations you would need to create a file with the following path: `config/webpack/node.development.config.js` or `config/webpack/node.production.config.js`. For example:\n\n```js\n// config/webpack/node.production.config.js\n\nmodule.exports = (params) => ({\n  node: {\n    __filename: false,\n  }\n});\n```\n\n### Extending/Overwriting a target configuration\n\nThe methods above allow you to extend/overwrite a configuration service for all the targets, but there are two ways of extending/overwriting configurations for an specific target:\n\n**`config/webpack/[target].config.js`**\n\nThis file allows you to overwrite the webpack configuration generated for an specific target, no matter the build type:\n\n```js\n// config/webpack/myApp.config.js\n\nmodule.exports = (params) => ({\n  node: {\n    __filename: false,\n  }\n});\n```\n\nThat change will only be applied when building the target `myApp`.\n\n**`config/webpack/[target].[build-type].config.js`**\n\nThis file allows you to overwrite the webpack configuration generated for an specifc target and build type.\n\n```js\n// config/webpack/myApp.production.config.js\n\nmodule.exports = (params) => ({\n  devtool: 'eval',\n});\n```\n\nThat change will only be applied when building the target `myApp` on a production build.\n\n## Making a plugin\n\nIf you want to write a plugin that works with this one (like a framework plugin), there are a lot of reducer events you can listen for and use to modify the webpack configuration:\n\n### Node target configuration\n\n- Name: `webpack-base-configuration-for-node`\n- Reduces: A webpack configuration for a Node target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a Node target and before using it.\n\n### Browser target configuration\n\n- Name: `webpack-base-configuration-for-browser`\n- Reduces: A webpack configuration for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a browser target and before using it.\n\n### Rules configuration\n\n- Name: `webpack-rules-configuration`\n- Reduces: A dictionary with a `rules` property that contains all the file rules for an specific target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all the rules for a target and before sending them to the main configuration.\n\n### Node target rules configuration\n\n- Name: `webpack-rules-configuration-for-node`\n- Reduces: A dictionary with a `rules` property that contains all the file rules for a Node target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all the rules for a Node target and before sending them to the main configuration.\n\n### Browser target rules configuration\n\n- Name: `webpack-rules-configuration-for-browser`\n- Reduces: A dictionary with a `rules` property that contains all the file rules for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all the rules for a browser target and before sending them to the main configuration.\n\n### Node target Javascript rules configuration\n\n- Name: `webpack-js-rules-configuration-for-node`\n- Reduces: A list of file rules for Javascript files for a Node target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all Javascript files rules for a Node target and before sending them to the main rules configuration.\n\n### Browser target Javascript rules configuration\n\n- Name: `webpack-js-rules-configuration-for-browser`\n- Reduces: A list of file rules for Javascript files for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all Javascript files rules for a browser target and before sending them to the main rules configuration.\n\n### Browser target SCSS stylesheets rules configuration\n\n- Name: `webpack-scss-rules-configuration-for-browser`\n- Reduces: A list of file rules for SCSS stylesheets files for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all SCSS stylesheets files rules for a browser target and before sending them to the main rules configuration.\n\n### Browser target CSS stylesheets rules configuration\n\n- Name: `webpack-css-rules-configuration-for-browser`\n- Reduces: A list of file rules for CSS stylesheets files for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all CSS stylesheets files rules for a browser target and before sending them to the main rules configuration.\n\n### Browser target HTML rules configuration\n\n- Name: `webpack-html-rules-configuration-for-browser`\n- Reduces: A list of file rules for HTML files for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all HTML files rules for a browser target and before sending them to the main rules configuration.\n\n### Browser target fonts rules configuration\n\n- Name: `webpack-fonts-rules-configuration-for-browser`\n- Reduces: A list of file rules for font files for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all font files rules for a browser target and before sending them to the main rules configuration.\n\nThe supported formats are:\n\n- `.svg` - But they need to be inside a `fonts` folder, to be able to differentiate them between images and fonts.\n- `.woff`\n- `.woff2`\n- `.ttf`\n- `.eot`\n\n### Browser target images rules configuration\n\n- Name: `webpack-images-rules-configuration-for-browser`\n- Reduces: A list of file rules for images files for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all images files rules for a browser target and before sending them to the main rules configuration.\n\nIt excludes all images which path matches with `favicon`, as the favicon needs to be on the root directory in order to be automatically detected by the browser.\n\nThe supported formats are:\n\n- `png`\n- `jpg`\n- `jpeg`\n- `gif`\n- `svg`\n- `ico`\n\n### Browser target favicons rules configuration\n\n- Name: `webpack-html-favicons-configuration-for-browser`\n- Reduces: A list of file rules for favicons files for a browser target.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after defining all favicons files rules for a browser target and before sending them to the main rules configuration.\n\nThe reason this is not included with the images rules is because favicons need to be on the roto directory in order to be automatically detected by the browser, and they can only be `ico` and `png`.\n\n### Node target development configuration\n\n- Name: `node-browser-development-configuration`\n- Reduces: A dictionary with the specific configuration for a Node target: `entry`, `output` and `plugins`.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a Node target development build and before sending it to the main configuration to merge everything.\n\n### Node target production configuration\n\n- Name: `webpack-node-production-configuration`\n- Reduces: A dictionary with the specific configuration for a Node target: `entry`, `output` and `plugins`.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a Node target production build and before sending it to the main configuration to merge everything.\n\n### Browser target development configuration\n\n- Name: `webpack-browser-development-configuration`\n- Reduces: A dictionary with the specific configuration for a browser target: `entry`, `output` and `plugins`.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a browser target development build and before sending it to the main configuration to merge everything.\n\n### Browser target production configuration\n\n- Name: `webpack-browser-production-configuration`\n- Reduces: A dictionary with the specific configuration for a browser target: `entry`, `output` and `plugins`.\n- Parameters:\n - `params`: The same dictionary sent to all the files that extend a configuration. Check the _\"Extending/Overwriting the configuration\"_ section for more information.\n\nThis is called after generating the configuration for a browser target production build and before sending it to the main configuration to merge everything.\n\n## Development\n\nBefore doing anything, install the repository hooks:\n\n```bash\n# You can either use npm or yarn, it doesn't matter\nnpm run install-hooks\n```\n\n### NPM/Yarn Tasks\n\n| Task                    | Description                         |\n|-------------------------|-------------------------------------|\n| `npm run install-hooks` | Install the GIT repository hooks.   |\n| `npm test`              | Run the project unit tests.         |\n| `npm run lint`          | Lint the modified files.            |\n| `npm run lint:full`     | Lint the project code.              |\n| `npm run docs`          | Generate the project documentation. |\n| `npm run todo`          | List all the pending to-do's.       |\n\n### Testing\n\nI use [Jest](https://facebook.github.io/jest/) with [Jest-Ex](https://yarnpkg.com/en/package/jest-ex) to test the project. The configuration file is on `./.jestrc`, the tests and mocks are on `./tests` and the script that runs it is on `./utils/scripts/test`.\n\n### Linting\n\nI use [ESlint](http://eslint.org) to validate all our JS code. The configuration file for the project code is on `./.eslintrc` and for the tests on `./tests/.eslintrc` (which inherits from the one on the root), there's also an `./.eslintignore` to ignore some files on the process, and the script that runs it is on `./utils/scripts/lint`.\n\n### Documentation\n\nI use [ESDoc](http://esdoc.org) to generate HTML documentation for the project. The configuration file is on `./.esdocrc` and the script that runs it is on `./utils/scripts/docs`.\n\n### To-Dos\n\nI use `@todo` comments to write all the pending improvements and fixes, and [Leasot](https://yarnpkg.com/en/package/leasot) to generate a report. The script that runs it is on `./utils/scripts/todo`.\n",
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"projext-plugin-webpack\",\n    \"description\": \"Allows projext to use webpack as a build engine.\",\n    \"homepage\": \"https://homer0.github.io/projext-plugin-webpack/\",\n    \"version\": \"4.0.2\",\n    \"repository\": \"homer0/projext-plugin-webpack\",\n    \"author\": \"Leonardo Apiwan (@homer0) <me@homer0.com>\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"projext\": \"^3.0.1\",\n      \"wootils\": \"^1.1.1\",\n      \"jimple\": \"homer0/jimple\",\n      \"fs-extra\": \"5.0.0\",\n      \"extend\": \"3.0.1\",\n\n      \"webpack\": \"3.10.0\",\n      \"webpack-dev-server\": \"2.11.1\",\n      \"webpack-node-utils\": \"3.0.0\",\n      \"extract-text-webpack-plugin\": \"3.0.2\",\n      \"html-webpack-plugin\": \"2.30.1\",\n      \"script-ext-html-webpack-plugin\": \"1.8.8\",\n      \"compression-webpack-plugin\": \"1.1.6\",\n      \"uglifyjs-webpack-plugin\": \"1.1.8\",\n      \"optimize-css-assets-webpack-plugin\": \"3.2.0\",\n\n      \"babel-core\": \"6.26.0\",\n      \"node-sass\": \"4.7.2\",\n\n      \"babel-loader\": \"7.1.2\",\n      \"css-loader\": \"0.28.9\",\n      \"sass-loader\": \"6.0.6\",\n      \"style-loader\": \"0.20.1\",\n      \"raw-loader\": \"0.5.1\",\n      \"file-loader\": \"1.1.6\",\n      \"url-loader\": \"0.6.2\",\n      \"image-webpack-loader\": \"4.0.0\",\n      \"resolve-url-loader\": \"2.2.1\",\n      \"source-map-loader\": \"0.2.3\",\n\n      \"webpack-dev-middleware\": \"2.0.4\",\n      \"webpack-hot-middleware\": \"2.21.0\"\n    },\n    \"peerDependencies\": {\n\n    },\n    \"devDependencies\": {\n      \"eslint\": \"4.16.0\",\n      \"eslint-config-airbnb-base\": \"12.1.0\",\n      \"eslint-plugin-import\": \"2.8.0\",\n      \"eslint-plugin-node\": \"5.2.1\",\n      \"babel-preset-env\": \"1.6.1\",\n      \"jest-ex\": \"4.0.0\",\n      \"jest-cli\": \"22.1.4\",\n      \"jasmine-expect\": \"3.8.3\",\n      \"jimpex\": \"^2.1.0\",\n      \"esdoc\": \"1.0.4\",\n      \"esdoc-standard-plugin\": \"1.0.0\",\n      \"esdoc-node\": \"1.0.3\",\n      \"leasot\": \"4.13.0\",\n      \"coveralls\": \"3.0.0\"\n    },\n    \"engine-strict\": true,\n    \"engines\": {\n      \"node\": \">=6.0.0\",\n      \"npm\": \">=3.0.0\"\n    },\n    \"main\": \"src/index.js\",\n    \"scripts\": {\n      \"install-hooks\": \"./utils/hooks/install\",\n      \"test\": \"./utils/scripts/test\",\n      \"lint\": \"./utils/scripts/lint\",\n      \"lint:full\": \"./utils/scripts/lint-full\",\n      \"docs\": \"./utils/scripts/docs\",\n      \"todo\": \"./utils/scripts/todo\"\n    }\n}\n",
    "longname": "/Users/homer0/CODE/Node/projext/projext-plugin-webpack/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]